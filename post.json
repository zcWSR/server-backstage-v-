[
    {
        "title": "玩了4年，一点经历和感想。看来我已经老了。。。打不动了",
        "date": "2015-09-16 04:06:23",
        "section": "搬运自百度贴吧[自己的帖子](http://tieba.baidu.com/p/4036626278)\n---\n\n### 小经历：\n　　想当初接触这款游戏是因为在psp上接触了project diva和dj max并且上了瘾，于是便寻找pc平台上的MUG，然后就发现了OSU。当初觉得卧槽这游戏简直太合胃口了，不仅疯狂的玩（仅限周末，平常家长不让就玩手机上的），还拉了死宅同学下水（已afk）。然而随着学业的加重，高考的逼近，这游戏从追求节奏快感的兴奋剂渐渐的变成了调剂生活的缓释胶囊。终于，毕业了，上了大学，心想着：哎呀终于TM有时间玩这货来和同学装逼了，可是，当再打开它却发现已然没有了当初的激情，更个新打两张图又关上了。环境变了，时间变了，人变了，所谓的物是人非？\n",
        "rest": "\n　　最近抽冷子又开始想玩这货了，多看了看贴吧，也加了个群，偶然发现原来我是这么的菜。。。新人们都好强啊，玩了几个\n\n### 小感想：\n#### 我自己：\nOSU这游戏从我刚接触时候的这个样子（手头没有高清的了）\n\n![](http://i3.tietuku.com/fe52852ba1efd0e7.png)\n\n![](http://i3.tietuku.com/9ff52f2bd11d12d5.png)\n\n  变成了现在的样子：\n\n![](http://i3.tietuku.com/90568a8c80c3de66.png)\n\n![](http://i3.tietuku.com/238f88cf7205c168.png)\n\n  　　扁平化是未来的趋势，说实话我真的好喜欢现在的风格，很佩服ppy，能把游戏做的如此炫酷，总是想我一个学软件工程的什么时候也能写出这样的游戏（有时甚至着手去尝试）。就像当初玩minecraft的时候也是很着迷，然而现在很少玩却以写插件为乐似的。\n#### 对玩家们：\n　　这游戏圈子没有那么大，林子里鸟的种类也少，大家总是能好好相处，希望喜欢的玩家一直玩下去，以后也是个美好的回忆（yy自己可以艹翻曲奇之类的...）。对于年龄比较小的玩家，我还是建议不要浪费过多的时间，毕竟学习才是最重要的，我也是吃过大亏的才这么说。\n*************************\n想了又想，最后还是无耻想贴上自己的id，欢迎还保有情怀的老玩家们来MP![](http://tb2.bdstatic.com/tb/editor/images/face/i_f02.png?t=20140803)\n\n看我就说吧，真TM菜。。。\n\n![](http://i3.tietuku.com/517b2528253edde9.png)\n",
        "labels": [
            "OSU",
            "tieba"
        ],
        "categories": [
            "game"
        ]
    },
    {
        "title": "大屏幕弹幕系统2.0的企划和以后的设想",
        "date": "2015-09-18 17:05:54",
        "section": "\n　　根据现阶段的情况并且在为以后着想的情况下，准备对现阶段弹幕系统的全部代码进行重构，由此开始大屏幕大幕系统2.0的企划。",
        "rest": "　　在IO方面，因为在1.0（姑且叫做1.0版本）中，所使用的websocket引擎StriveEngine在测试中出现严重问题（详情见前几天[博客](http://www.zcwsr.com/2015/09/16/about-big-screen-danmaku-program/)），所以准备使用自己写的协议来进行数据传出，以发包的形式。此外，计划将整个项目分为3个部分：more客户端，服务端和呈现端。\n**下图为数据交互关系图**\n![](http://ww4.sinaimg.cn/large/006w13srjw1f5xa8vdedyj30mr0cstat.jpg)\n\n　　对于呈现端的表现方式，因为1.0版在弹幕量大的情况下会出现卡顿，所以准备放弃原来使用WPF自带的Animation类在Canvas布局上绘制的方法，转阵图形引擎openGL。预计会十分的艰辛，因为之前从来没有接触过图形引擎。\n\n　　对于在手机上使用的移动客户端，未来会在界面的美化和对用户友好上下一些功夫，但那就不是我自己一个人的事了，团队里的其他人比我要懂网页开发。\n\n### 紧接着要干的事：\n1. 首先要着手于自定义协议的编写，同样我也是从来没有尝试过，其实从心里来说我还是对自己写协议存在怀疑的态度。但是时间还有的是，距离下次的实战测试还有3个月（其实不到），有足够的时间让我去研究。更何况，实在是写不出，还有其他的协议可以使用勒\n2. 找找openGL+C#的资料，准备搞好呈现端，我对此抱有很大的期望\n3. 没了，有了再写。\n******\n\n### 未来大设想：\n　　那次我们几个在实训区的交流还是有点用的，至少对未来有了方向。\n\n　　Oyangiz随便提的一句做“弹幕盒子”是个不错的想法，但是涉及到的知识面实在是太广，还有和硬件对接的问题，目前是从下手的，至少在现阶段的2.0计划稳定完成之后再说。\n\n　　Arthur·Lee一直难以忘怀之前和我一起准备做但是接近弃坑的VR桌面，那就去做吧。正好我在看完openGL+C#之后也会帮上点忙。\n\n　　涵妹你自己有自己的活，我就不管了2333，能给我传道授业解惑最好( •̀ ω •́ )。\n",
        "labels": [
            "csharp",
            "danmuku"
        ],
        "categories": [
            "coding"
        ]
    },
    {
        "title": "大屏幕弹幕系统",
        "date": "2015-09-15 17:02:33",
        "section": "　　昨天的新生大会第一次使用假期写的弹幕系统，虽然有些问题但整体上还是不错的，正好有空写博文，就把开发过程和测试情况都讲一讲吧！",
        "rest": "******\n\n### 开发过程：\n\n　　有写弹幕系统这个想法是在上学期的期末的，那时和Oyangiz商量好一起写（其实最后还是我自己写的![](http://img.baidu.com/hi/face/i_f31.gif)），结果一直准备考试没时间，直到假期才开始着笔。之前也是没有写过c#，感觉这次真的是非常的冒险，但其实写过之后才发现和java真他妈像。\n\n　　在看了看c#的基础之后，结合买来的书上选择了websocket作为通讯协议，然后就是在网上一通搜，发现了CSDN上一个叫“打通BS与CS的Demo源码”的demo，下下来之后发现他用了一个叫StriveEngine（之后在测试的时候还会再提到，非常重要）的封装了websocket的引擎，据说这个引擎很叼，解决了粘包、阻塞、掉线重连等一系列问题。原demo是一个实现网页和服务器聊天的项目，我想要写的弹幕系统和他比起来还要简单，根本就不用服务端回馈给客户端什么，只是发送给服务端弹幕数据就好了（至少那时候单纯的我是这么想的）。\n\n　　通讯方面的问题算是解决了，但是收弹幕到后该如何把他们发射到屏幕上面呢？又是一通百度google，最后在github上找到了一个项目，基本原理就是用到了Canvas作为父级布局（Canvas直译为“画布”，当然是控件想要放在哪里都行啦！）弹幕是写到TextBox里面的，TextBox和字体的高度是相同的，所以用全屏的高度/弹幕高度获得可用的行数，弹幕的TextBox用动画从整个布局的最左侧或最右侧根据设定好的行从屏幕上飘过。我又在此基础上加了某些小细节，以下用代码贴出：\n\n```csharp\npublic void createDanmaku(Danmaku _danmaku)\n{\n    TextBlock _singleDanmaku = new TextBlock();\n    _singleDanmaku.Text = _danmaku.Text;\n    _singleDanmaku.FontFamily = (FontFamily)new FontFamilyConverter().ConvertFromString(\"Microsoft YaHei\");\n    _singleDanmaku.FontSize = GlobalVariables.DANMAKU_FONTSIZE;\n    _singleDanmaku.FontWeight = FontWeights.Bold;\n    _singleDanmaku.Opacity = GlobalVariables.DANMAKU_OPACITY;\n    int targetRow = getAvailableRow();\n    double rowHeight = GlobalVariables.DANMAKU_FONTSIZE + 5;\n    _singleDanmaku.SetValue(Canvas.TopProperty, (double)targetRow * rowHeight);\n    //颜色\n    _singleDanmaku.Foreground = new SolidColorBrush((Color)ColorConverter.ConvertFromString((string)_danmaku.Color));\n    //阴影\n    if (GlobalVariables.DANMAKU_SHADOW ==true)\n    {\n        DropShadowEffect _ef = new DropShadowEffect();\n        _ef.RenderingBias = RenderingBias.Performance;\n        _ef.Opacity = (double)100;\n        _ef.ShadowDepth = (double)0;\n        _ef.BlurRadius = GlobalVariables.SHADOW_BLURRADIUS;\n        if (_singleDanmaku.Foreground == new SolidColorBrush(Color.FromRgb(0,0,0)))\n        {\n            _ef.Color = Color.FromRgb(255, 255, 255);\n        }\n        else\n        {\n            _ef.Color = Color.FromRgb(0, 0, 0);\n        }\n        _singleDanmaku.Effect = _ef;\n    }\n    _singleDanmaku.Loaded += delegate(object o, RoutedEventArgs e) { doAnimation(_singleDanmaku, GlobalVariables.DANMAKU_DURATION, targetRow); };\n    danmakuRender.Children.Add(_singleDanmaku);\n    lockRow(targetRow);\n}\nprivate void doAnimation(TextBlock _singleDanmaku, int _duration, int _row)\n{\n    TextBlock _targetDanmaku = _singleDanmaku;\n    double _danmakuWidth = _targetDanmaku.ActualWidth;\n    DoubleAnimation _doubleAnimation = new DoubleAnimation(GlobalVariables.ScreeWidth, -_danmakuWidth, new Duration(TimeSpan.FromMilliseconds(_duration)), FillBehavior.Stop);\n    _doubleAnimation.Completed += delegate(object o, EventArgs e) { removeOutdateDanmaku(_singleDanmaku, _row); };\n    _targetDanmaku.BeginAnimation(Canvas.LeftProperty, _doubleAnimation);\n    //Storyboard _sb = new Storyboard();\n    //Storyboard.SetTarget(_doubleAnimation, _targetDanmaku);\n    //Storyboard.SetTargetProperty(_doubleAnimation, new PropertyPath(\"(Canvas.Left)\"));\n    //_sb.Completed += delegate(object o, EventArgs e) { removeOutdateDanmaku(_singleDanmaku, _row); };\n    //_sb.Children.Add(_doubleAnimation);\n    //_sb.Begin();\n\nprivate int getAvailableRow()\n{\n    int i = 0;\n    int j = 0;\n    foreach (bool a in GlobalVariables._rowList)\n    {\n        if (a == false)\n        {\n            i++;\n        }\n    }\n    if (i==0)\n    {\n        unlockRow();\n        //int ret = ra.Next(0, _maxRow - 1);\n        //return ret;\n        //debug\n        Console.WriteLine(\"All Rows Full,unlock all rows.\");\n    }\n    foreach (bool a in GlobalVariables._rowList)\n    {\n            if (a == false)\n        {\n            break;\n        }\n            j++;\n    }\n    return j;\n}\nprivate void lockRow(int _row)\n{\n    GlobalVariables._rowList[_row] = true;\n}\nprivate void unlockRow(int _row = -1)\n{\n    if (_row == -1)\n    {\n        //for (int i = 0; i &lt;= _rowList.Length - 1; i++)\n        //{\n        //    _rowList[i] = false;\n        //}\n        //重置所有行\n        GlobalVariables._rowList = new bool[GlobalVariables._maxRow - 1];\n    }\n    else\n    {\n        if (!(_row &gt; GlobalVariables._rowList.Length - 1))\n        {\n            GlobalVariables._rowList[_row] = false;\n        }\n    }\n}\n```\n\n　　剩下的就是界面的问题了，在经过长时间的思索（掉头发）、晚睡之后，最终解决了弹幕日志的动态添加：对ListView的items进行Danmaku类数据绑定；添加对用户友好的设置界面：重开一个设置窗口，动态调整各种全局变量等等数不清的问题。\n\n　　整个项目写完之后本来是想把代码上传到github上的 ，但是因为英语太差，点错了，没有上传新的版本而是把老版本的克隆回了本地。。。。。。我整个人都不好了！丢了两个大类啊！几百行的纯手撸代码啊！最后是硬着头皮补回来了233\n\n#### 小结：\n　　开发这个项目用了我整整一个假期（虽然大部分时间都在玩，但是硬说还是有的( •̀ ω •́ )），不能说是困难，简直是艰辛。然而感觉还是学到了点东西的，至少c#这门语言算是入门了，也稍微有资格装装逼了。\n\n### 测试报告：\n　　昨天的新生大会算是一次正式的测试，虽然反响还是不错的，但我个人感觉还差得远。。。。下面分析一下出现的问题：\n\n1. 弹幕客户端在关闭是会有向服务端提交空信息导致解析错误的bug，虽然用异常处理草草解决，但终究不是个事\n\n2. 使用的闭源引擎StriveEngine出现了原来没有想到的只能承载十个连接的问题，可能与闭源有关。\n\n　　总归来说问题还是很多的（简直致命好不好），在三校大会之前准备进行全部代码重构，估计是个浩大的工程。此外，对这个大屏幕弹幕系统有一直维护下去，把他完善的打算，具体情况将会在日后的博文中细谈。\n\n　　今天就先写这么多，时间不早了，睡觉zzz\n\n　　晚睡小心掉头发哦！ (╭￣3￣)╭\n",
        "labels": [
            "csharp",
            "danmuku",
            "first_try"
        ],
        "categories": [
            "coding"
        ]
    },
    {
        "title": "搭建一个ss服务器",
        "date": "2016-11-13 07:57:10",
        "section": "　　上个暑假的时候因为学日语在学校宿舍住了一个假期，没事干的时候总想搞点什么。正好原来fanqiang用的VPN到期了（那个破VPN虽然不是很快，但是不看视频不打游戏什么的就fanqiang查个东西什么的还是可以的，贴个[链接](https://vpnso.com/)造福以下人类），琢磨着换个翻墙方式，然后就发现了SS([ShadowSocks](https://zh.wikipedia.org/zh-hans/Shadowsocks))这么个东西，研究着搭了一个，用着还挺好。",
        "rest": "\n## 首先搞个服务器\n### 买最便宜的就行\n　　看自己喜好买就好了，我用的是[vultr](https://www.vultr.com/)的，日本节点，感觉还是很不错的，顺便发一下我的[邀请链接](http://www.vultr.com/?ref=6950807)，用这个链接注册的话是会送10刀，还是很划算的。\n　　还有服务器的话，用不着很高的配置，一般的话买最便宜的那个的配置就够用了。\n### 选个系统\n　　推荐linux，系统占用低，下面的教程也都是在Debian8环境下的，windows的还请自行研究\n\n## 服务器配置\n\n### 准备工作\n#### 更新以下软件库\n```bash\nsudo apt-get update\n```\n#### 安装编译器和git\n```bash\napt-get -y install build-essential autoconf libtool libssl-dev git\n```\n### 安装锐速\n#### 关于锐速\n　　锐速相当于一款TCP加速软件，虽然不知道他原理是怎样的，但是配置好之后速度有显著的提升\n#### 安装\n```bash\nwget -N --no-check-certificate https://raw.githubusercontent.com/91yun/serverspeeder/master/serverspeeder-all.sh && bash serverspeeder-all.sh\n```\n（卸载）\n```bash\nchattr -i /serverspeeder/etc/apx* && /serverspeeder/bin/serverSpeeder.sh uninstall -f\n```\n为降低丢包率和提升速度，建议修改一下配置文件，路径为/serverspeeder/etc/config，修改如下字段：\n```bash\nadvinacc=\"1\"\nmaxmode=\"1\"\nrsc=\"1\"\ngso=\"1\"\n```\n#### 启动\n之后，使用指令\n```bash\n/serverspeeder/bin/serverSpeeder.sh start\n```\n启动锐速\n（停止指令为）\n```bash\n/serverspeeder/bin/serverSpeeder.sh stop\n```\n**之后重启一下服务器！**\n重启之后使用指令查看一下锐速的状态\n```bash\nservice serverSpeeder status\n```\n如果有显示 **active (running)** 等字样，则可进行下一步\n#### 其余调整\n使用 **lsmod** 检查是否有appex0模块\n加载TCP拥塞控制算法来降低丢包率\n```bash\n/sbin/modprobe tcp_hybla\n```\n然后查看是否已经正常加载\n```bash\nlsmod |grep hybla\n```\n\n### 安装ss\n　　有两种安装方式，一种是从git克隆下来安装，另一种是我在其github页面上看到的直接通过 **apt-get** 安装,两种方式我都会写出来，但是我推荐使用第二种。\n#### git安装方式\n依次输入如下指令\n```bash\ngit clone https://github.com/madeye/shadowsocks-libev.git\ncd shadowsocks-libev\n./configure && make\nmake install\n```\n#### apt安装方式（debian用户使用，其他系统请看其[github](https://github.com/shadowsocks/shadowsocks-libev)页面）\n```bash\nsudo sh -c 'printf \"deb http://ftp.debian.org/debian jessie-backports main\" > /etc/apt/sources.list.d/jessie-backports.list'\nsudo apt update\nsudo apt -t jessie-backports install shadowsocks-libev\n```\n\n#### 运行shadowsocks-libev\n使用 **nohup** 指令直接让ss在后台运行\n参数说明\n```bash\n-s 服务端监听的地址，服务端可填写 0.0.0.0\n-p 服务端的端口。最好10000以下 xxxx\n-k 用于加密的密码。貌似得8位以上，xxxxxxxx\n-m 加密方法，推荐 \"aes-256-cfb\"\n```\n可以直接添加参数\n```bash\nnohup /usr/local/bin/ss-server -s 0.0.0.0 -p xxxx -k xxxxxxxx -m aes-256-cfb &\n```\n或者修改位于 **/etc/shadowsocks.json** 的配置文件\n```bash\n{\n\"server\":\"0.0.0.0\",\n\"server_port\":服务器端口号,\n\"local_address\": \"127.0.0.1\",\n\"local_port\":1080,\n\"password\":\"这里填写密码\",\n\"timeout\":300,\n\"method\":\"aes-256-cfb\",\n\"fast_open\": false,\n\"workers\": 1\n}\n```\n运行指令\n```bash\nnohup /usr/local/bin/ss-server -c /etc/shadowsocks.json &\n```\n\n### 配置自动运行\n　　因为没有人会有事没事的监视着服务器，所以咱们把以上的启动指令都设置为自动运行\n编辑/etc/rc.local，添加开机启动\n```bash\nservice serverSpeeder start \nnohup /usr/local/bin/ss-server -c /etc/shadowsocks.json &\n```\n或\n```bash\nservice serverSpeeder start \nnohup /usr/local/bin/ss-server -s 0.0.0.0 -p xxxx -k xxxxxxxx -m aes-256-cfb &\n```\n\n## 本地配置\n　　因各系统不同，所使用的软件还请自行寻找。\n　　windows推荐使用[ShadowSocks](https://github.com/shadowsocks/shadowsocks-windows)\n　　iOS下没有免费软件，但是有一款国人编写的付费软件[Shadowrocket](https://itunes.apple.com/us/app/shadowrocket-for-shadowsocks/id932747118)\n　　android好久不用了，还是自己搜搜吧\n### 浏览器配置\n　　chrome内核的可以使用[SwitchyOmega](https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif?hl=zh-CN)插件来实现国内外无缝切换，配置文件在我的[百度云](https://pan.baidu.com/s/1dF1HA4T)里有分享，直接导入就行啦。\n\n\n在国内的网站我还没找到总结的这么全的，还请大家多多分享转载，但是请注明本文链接地址，谢谢\no(*￣▽￣*)ブ\n\n\n\n\n\n\n\n\n\n\n\n　　\n\n",
        "labels": [
            "first_try"
        ],
        "categories": [
            "coding"
        ]
    },
    {
        "title": "Hello World!",
        "date": "2015-09-14 15:57:45",
        "section": "~~第一次使用wordpress搭建自己的博客站，有点小激动。总之以后的有关科技、生活、编程、音乐。。。我喜欢的一切都会在这里更新。~~\n\n~~恭喜自己建站成功！~~\n\n以上为初次使用wordpress建立自己博客的时候的内容，从2016年7月份开始更换为全新nodejs hexo并挂载于github和coding下，以此做声明\n——2016年7月17日\n\n![个人头像和网站图标](http://ww2.sinaimg.cn/large/006w13srjw1f5x8jpdaq1j303k03k3yh.jpg)\n",
        "rest": "",
        "labels": [
            "first_try"
        ],
        "categories": [
            "ramble"
        ]
    },
    {
        "title": "之前的想法已被推翻，重写一篇",
        "date": "2015-09-29 14:59:27",
        "section": "\n　　在之前的企划中想的是使用客户端、服务端和呈现端3个部分，这个是没有变化的，变化的是3个部分之间的数据交互方式。因为不管怎样改客户端都是网页的，但是网页和服务器之间的通讯只有http和websocket，所以原先打算自己写协议的计划被被彻底推翻。以下是新的方案：\n",
        "rest": "\n　　受弹弹play网页客户端的启发，感觉使用数据库还是比较现实的233.当用户发送弹幕的时候，先将弹幕写进服务器的数据库。与此同时，呈现端一直在后台检测数据库的更新，如有更新则将新的弹幕取出，解析后呈现在屏幕上。\n\n估计也就这样了。\n\n　　整体开发节奏也有了变化，现在是着手于呈现端，思考了两种方式：一种是用我inform的GDI+方式对窗口/桌面进行重绘以实现动画效果。在先后解决了闪屏等问题之后，实际测试虽性能不错，可由于动画的实现方式的原因（就是先把弹幕画在画布上，隔一段时间重画一张，删掉前一张，肉眼看去好像在移动一样），总是觉得差强人意；另一种还是用原来的方案。用C#自封装的Animation类，在把弹幕的载体换成Label后卡顿有所缓解，同样的，离预想还差的远。\n\n　　涵妹在GDI的道路上一去不复返，我还在考虑“弹幕的载体一定是控件吗？”的问题，希望能尽快推进。\n\n　　就是记个开发进度，后面没了。\n",
        "labels": [
            "web",
            "csharp",
            "java"
        ],
        "categories": [
            "coding"
        ]
    },
    {
        "title": "尝试着自己写一个迷宫生成算法",
        "date": "2015-11-10 17:16:19",
        "section": "　　上星期的科协课堂是我讲的，教新生们写了一个控制台版的迷宫小游戏，感觉反响还不错，虽然简单，但也是有值得拓展的地方的。",
        "rest": "\n　　于是我就稍微百度了一下。。。。两下。。。三下。。。。\n\n　　卧槽根本不能理解啊，这都是什么鬼算法，基本道理我都明白，就是算法看不懂。周三上完课之后没什么时间，最后拖到了周五有了一晚上的整时间，可以仔细的研究研究。（以下可能有[借鉴](http://bbs.9ria.com/thread-156150-1-1.html)）基本上常用的有三大算法：\n\n　　首先是深度优先，深度优先法生成的迷宫极度扭曲，有着一条明显的主路。\n\n　　深度优先算法的核心是（翻译的维基）：\n\n1. 将起点作为当前格并标记\n2. 当还存在未标记的格时\n  1. 如果当前格有未标记的邻格\n    1. 随机选择一个未标记的邻格\n    2. 将当前格入栈\n    3. 移除当前格与邻格的墙\n    4. 标记邻格并用它作为当前格\n  2. 反之，如果栈不空\n    1. 栈顶的格子出栈\n    2. 令其成为当前格\n  3. 反之，随机选择一个格子为当前格并标记\n\n　　通俗的说，就是从起点开始随机走，走不通了就原路返回，从下一个能走的地方再开始随机走。\n\n　　然后是随机prim，随机普里姆法生成的迷宫岔路较多，整体上较为自然而又复杂。\n\n　　随机prim算法的核心是（翻译的维基）：\n\n1. 让迷宫全是墙\n2. 选一个格作为迷宫的通路，然后把它的邻墙放入列表\n3. 当列表里还有墙时\n  1. 从列表里随机选一个墙，如果它对面的格子不是迷宫的通路\n    1. 把墙打通，让对面的格子成为迷宫的通路\n    2. 把那个格子的邻墙加入列表\n  2. 如果对面的格子已经是通路了，那就从列表里移除这面墙\n\n　　通俗的说，就是在所有可以走的地方上随机挖洞，创造出新的可以走的地方。\n\n　　最后是递归分割，递归分割法生成的迷宫较为简单，直路多且不扭曲，还可以生成“小房间”，此算法十分高效。\n\n　　通俗的说，就是把空间用十字分成四个子空间，然后在三面墙上挖洞（为了确保连通），之后对每个子空间继续做这件事直到空间不足以继续分割为止。有点像四叉树呢。\n\n　　刚开始的时候我选了DSF法，也就是第一种，重点是要找到”拐点“来方便在没路可走的时候选择最近的新的路径，但是因为始终没有弄清楚怎样才能搞到拐点最后无果而终\n\n　　然后选的是Prim生成法，感觉逻辑上比较的简单。为了方便实现，我封装了一个叫Point的类，Point类所代表的点既可以是通路也可以是墙，并且可以通过一个通路点获取到他最近的墙点。\n\n　　结果还算是可以，逻辑写对了，一步一步的生成也没有发现错误，就是程序里面的循环停不下来了，记录临墙的集合永远不会清空。。。这个问题到现在还是没有解决。\n\n　　最后贴一下成果（最上面的数字就是剩余的临墙数量，就是没法清零）：\n　　![maze](http://mypage-zcwsr.rhcloud.com/wp-content/uploads/2015/11/QQ%E6%88%AA%E5%9B%BE20151111011402.png)\n",
        "labels": [
            "csharp",
            "maze",
            "first_try"
        ],
        "categories": [
            "coding"
        ]
    },
    {
        "title": "Hello, hexo!",
        "date": "2016-07-17 15:05:46",
        "section": "换了个新的博客，总得写点写点什么了吧\n\n　　首先庆祝自己成功从wordpress+openshift换到了hexo+github/coding。\n\n　　把原来的写的文章全部导出、再排版，真的是相当的费事。\n\n　　有些想要说的，过去都因为太懒，没有去写成博文，也是挺遗憾的。回来找空补上吧，又是个体力活（写随笔也是个有趣的事）\n\n　　总之好好维护吧。\n",
        "rest": "",
        "labels": [
            "first_try"
        ],
        "categories": [
            "coding"
        ]
    },
    {
        "title": "本着因为文章少所以要写点什么的原则，强行更新一篇(￣▽￣)",
        "date": "2015-09-16 17:52:29",
        "section": "　　最近喜欢上了Kalafina，有浦尾大妈编曲的K团简直叼。\nKeiko辣么萌，原来竟然是唱低音的，简直低音小恶魔233；Hikaru虽说颜值不是最高的，但是人家唱功好啊，唱功好就喜欢，ACG界唱的好长得丑的也是大有人在的（没漏过脸的Claris除外。。。）。",
        "rest": "\n　　有人说K团的音乐风格过于单一，都是那种圣歌风格。我倒是没那么觉得，风格相同但是表达的感情不同啊，我喜欢啊，反正在我听腻这种风格之前是不会这么说的(≧▽≦)\n******\n\n　　找几首我自己比较喜欢的贴出来（来自网易云音乐）\n+ 来自专辑《The Best \"Red\"》\n<iframe width=\"330\" height=\"86\" frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" src=\"http://music.163.com/outchain/player?type=2&amp;id=28815132&amp;auto=0&amp;height=66\"></iframe>\n<iframe width=\"330\" height=\"86\" frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" src=\"http://music.163.com/outchain/player?type=2&amp;id=28815138&amp;auto=0&amp;height=66\"></iframe>\n<iframe width=\"330\" height=\"86\" frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" src=\"http://music.163.com/outchain/player?type=2&amp;id=28815144&amp;auto=0&amp;height=66\"></iframe>\n<iframe width=\"330\" height=\"86\" frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" src=\"http://music.163.com/outchain/player?type=2&amp;id=28815145&amp;auto=0&amp;height=66\"></iframe>\n\n+ 来自专辑《The Best \"Blue\"》\n<iframe width=\"330\" height=\"86\" frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" src=\"http://music.163.com/outchain/player?type=2&amp;id=28814310&amp;auto=0&amp;height=66\"></iframe>\n<iframe width=\"330\" height=\"86\" frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" src=\"http://music.163.com/outchain/player?type=2&amp;id=28814311&amp;auto=0&amp;height=66\"></iframe>\n<iframe width=\"330\" height=\"86\" frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" src=\"http://music.163.com/outchain/player?type=2&amp;id=28814319&amp;auto=0&amp;height=66\"></iframe>\n<iframe width=\"330\" height=\"86\" frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" src=\"http://music.163.com/outchain/player?type=2&amp;id=28814322&amp;auto=0&amp;height=66\"></iframe>\n\n　　《The Best \"Red\"》和《The Best \"Blue\"》这两张专辑我没记错的话，应该是两场演唱会的原曲专辑，已经是精选了，迫于排版原因，我又精选出了这几首，很遗憾没有全选。说实话，真的都太好听了，感情色彩表达的很到位，尤其是给小圆和Fate这两部动漫唱的那些曲子，搞得我都想去把小圆补了。\n\n　　有人问我为什么喜欢ACG音乐？其实我也说不清，大部分的ACG音乐都是为相应的游戏或动漫作品量身定做的，在各个方面上都和作品保持着高度的一致性，可能正式因为当听到这些歌的时候回想起剧情和自己的经历，心潮澎湃，引起共鸣，心中的神作便由此诞生了。。。可能是这种原因，等我想到别的原因的时候会再写随笔的。\n\n******\n\n　　听说最近泽野弘之大神又出新专辑了，什么？你们说他又炒冷饭？炒冷饭我也听！来，小哥露个脸 (*￣∇￣*)\n\n　　![](http://i1.tietuku.com/e05293534b203bf3.png)\n",
        "labels": [
            "ACG",
            "Kalafina"
        ],
        "categories": [
            "ramble"
        ]
    },
    {
        "title": "好长时间没有写东西了，为什么呢？",
        "date": "2015-11-02 01:35:03",
        "section": "　　没错就是太懒，什么都懒得干。\n\n　　最近连开发日志都没写，因为根本就没写程序，哪里来的开发日志。。。\n\n　　其实应该这样说，自从开学以来就没有认真过，刚大一的时候的热情也没有了。\n\n　　明明有很多的事情要做（12月份的6级，还有自己的项目等等），可是就是不想干，不强迫自己写点是么是不会思考这种问题的。\n",
        "rest": "",
        "labels": [],
        "categories": [
            "ramble"
        ]
    },
    {
        "title": "（博文补完计划）尝试着自己写一个网络爬虫",
        "date": "2016-07-20 03:46:02",
        "section": "ERO_Spider第一版\n------\n　　上个假期的时候没事干，稍微学了一下python，因为有其他面向对象语言的基础所以看起来也不是很费力，看的是[廖雪峰的python教程](http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000)，在这里也推荐一下。\n　　一个语言学完了总得拿来玩一玩吧，很早之前就知道有“[爬虫](http://baike.baidu.com/link?url=cDt-0kf8R61h97Mh5U0RW0h6bhPnHuVGDODVuVtMsdr03L8lsrBRPwt32Qim7-mT)”这种东西，所以就尝试着用python去写一个。因为刚刚学，就找一个结构较为简单的网站来试试手，正好那时候知道了有个二次元图站叫做[KonaChan](http://www.konachan.com/)（这个是18X版的，非18X版为[konachan.net](http://www.konachan.net/)），就是他了。",
        "rest": "",
        "labels": [
            "python",
            "first_try"
        ],
        "categories": [
            "coding"
        ]
    },
    {
        "title": "不知不觉，2015年过去了，是时候总结一下了",
        "date": "2016-02-04 15:13:19",
        "section": "　　要真的说是对去年整整一年进行总结，还是真是有点困难，大一下半学期的事情几乎都忘了，刚刚结束的大二上学期还是记得清楚的。那就尽量把能想到的都说一下。",
        "rest": "### 学习方面：\n　　去年前半年（大一下学期）的状况忘记了，只是记得学的还算是不错了，拿了个二等奖学金（差一点能拿一等来着）。\n　　刚过的这个学期（大二上）感觉不是很好，应该是不喜欢的课比较多还是单纯的变懒了，大部分的时候都没在认真听，每天就是玩玩玩，虽然说原来也是这样嗨，但是这学期更严重。最后的直接结果就是，血崩（并没有挂科，在别人看来可能已经很不错了，但是我觉得我这上课不听的人就靠着复习的两三天考出来的分不管怎么样都是和都搞懂了考出来的分比差得多，所以就是血崩）。\n由以上两学期得出结论：\n1.浪，并不能考好，而且浪的也不爽\n2.魏老头的课，虽然说可以刷脸过，但要是想真正学会点什么的话，必须好好听。人家岁数也不小了，讲的挺好的，为什么不听呢对吧\n3.听到有人说奖学金没用，给这么少不惜的拿。请这位同学在拿到奖学金之后在说这话，要不我会看不起你。\n\n### 技术方面：\n　　2015年在程序上还是有点小成就的（自己是这么认为的）。\n　　上半学期快结束的时候，我们POI战队当时为了要参加个忘了是什么的比赛，想要做一个弹幕系统，当时也就是说说，我就记住了，本来说好了要一起写的，结果假期的时候根本没人理我，没办法就自己在假期入门了c#然后写了个还算的上能用的弹幕系统。本着不浪费劳动成果的原则，在我自己的强烈推荐下，在下学期的新生大会上用了，可惜效果极差，具体原因不说了，详细看过去的[博文](http://www.zcwsr.com/2015/09/16/about-big-screen-danmaku-program/)。\n　　下半学期，搞个弹幕系统2.0出来的计划，由于自己太懒（以及渣队友），没有完成。期间为了给科协新生们讲课，研究写了个迷宫生成程序。详细的过去博文都有。\n一年的技术研究得出以下结论：\n1.这个专业的知识就是黑洞，越学你就越觉得：卧槽，我怎么什么都不会\n2.c#这个语言很高雅\n3.我不是很喜欢java，主要是因为常用的IDE——eclipse太丑了。\n\n### 其他：\n　　大学也是上了两年了，最有体会的还是学会了怎么说话，与人交往是一门艺术。\n\n### 2016年展望：\n　　这篇博文开始写的时候已经是16年了，以下就用今年的口吻来说好了。\n　　学习方面没有什么什么太重要的，保持我自己认为的最好就行了。快要到来的这个学期课很多，还是好好听为好。\n　　技术这边，假期准备学会python（其实已经在学）。正巧发现了一个弹幕引擎，下学期弹幕系统2.0应该可以完成了。\n　　非常想买一台ps3，非常想买一台ps3，非常想买一台ps3，很重要所以说3遍。\n　　作为一个宅，我不甘心做一条咸鱼，今年最好能去一次漫展，能去cj更好。\n\n就这些，想到什么，还会再补。一篇博文从1月20号写到2月4号，我是有多严重的拖延症。。。。。\n\n**最后，祝自己新年快乐，开心的过一年( •̀ ω •́ )y**\n",
        "labels": [
            "summarize"
        ],
        "categories": [
            "ramble"
        ]
    },
    {
        "title": "angular2 + express + mongoDB 博客部署",
        "date": "2017-03-31 06:44:23",
        "section": "拖了一个假期+一个月时间的重构的博客终于算是出了成品，开始的时候是为了不麻烦，所以准备只写前端，但是这样的话如果挂在github的pages上用读markdown文件的形式访问博客代码写起来反而超麻烦。纠结了很久，最后还是用了express+mongoDB做后台前台jsonp访问的形式，这样前后台写起来都很舒服。\n\n这回就是记录一下博客的整个部署过程，防止以后自己忘了，开发过程的话，会在以后的文章里慢慢补上来。\n\n",
        "rest": "\n## Debian8 上的准备工作 \n服务器用的是vutlr的日本节点的VPS，原本是用来搭ss翻墙的，正好用来配express+mongoDB\n\n### 安装node.js\n[node的官网]()其实有写debian8的配置方法，还是记下来为好，省的回来再翻墙看\n\n#### 安装curl和源\n\troot@debian:~$ sudo apt-get install curl\n\troot@debian:~$ sudo curl -sL https://deb.nodesource.com/setup | bash -\n\n#### apt安装node\n\troot@debian:~$ apt-get install -y nodejs\n\t\n还能再简单点吗\n\n### 配置mongoDB\n顺便说一下，刚开始想写带后端的时候用的是SQLite，但是出了点问题，一进行查询操作数据表就自动清空了，十分的迷。\n\n步骤是从mongoDB抄过来的，先添加源，然后apt安装\n\n#### 添加源后用apt安装\n\n\techo \"deb http://repo.mongodb.org/apt/debian jessie/mongodb-org/3.4 main\" | tee /etc/apt/sources.list.d/mongodb-org-3.4.list\n\n执行之后控制台会提醒使用什么指令安装，不再赘述\n\n\n#### mongoDB相关命令\n```\nservice mongod start //启动服务\nservice mongd stop //停止服务\nservice mongod restart //重启服务\n//卸载\nservice mongod stop\napt-get purge mongodb-org*\nrm -r /var/log/mongodb\nrm -r /var/lib/mongodb\n```\n\n因为mongoDB默认是不开启远程访问的，需要修改配置文件才可以，配置文件路径为`/etc/mongod.conf`，修改`bind_ip = 0.0.0.0`即可。\n\n#### 数据库的转移\n开发的时候用的是本机数据库，需要将数据库进行迁移，因为monggoDB内置了`mongodump`和`mongorestore`备份还原命令，所以直接在本机操作就可以。\n\n```\n//将名为my_site的数据库保存为my_site.archive文件，存放在/Users/zcwsr/Desktop下\nmongodump --archive=/Users/zcwsr/Desktop/my_site.archive --db my_site\n\n//将备份文件还原至地址为45.32.27.59:27017的数据库my_site中\nmongorestore -h 45.32.27.59:27017 --archive=/Users/zcwsr/Desktop/my_site.archive --db my_site\n```\n\n### 配置nginx\n十分简单，修改配置文件之后重新启动服务就好了\n\n```\nuser  root;  \nworker_processes  1;  \n\nevents {  \n    worker_connections  1024;  \n}  \n\nhttp {  \n    include       /usr/local/nginx/conf/mime.types;  \n    default_type  application/octet-stream;  \n  \n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '  \n                      '$status $body_bytes_sent \"$http_referer\" '  \n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';  \n  \n    #access_log  logs/access.log  main;  \n  \n    sendfile        on;  \n    #tcp_nopush     on;  \n  \n    #keepalive_timeout  0;  \n    keepalive_timeout  65;  \n  \n    #gzip  on;  \n  \n  \n    #server {  \n    #    listen       88;#端口号  \n    #    server_name  localhost;#本机  \n    #\n    #    charset utf-8;  \n    #\n    #    #access_log  logs/host.access.log  main;  \n  \n    #location ~ .*\\.(gif|jpg|jpeg|png)$ {  \n    #    expires 24h;  \n    #        root /home/mysite/images/;#指定图片存放路径  \n    #        access_log /home/wwwlogs/images.log;#日志存放路径  \n    #        proxy_store on;  \n    #        proxy_store_access user:rw group:rw all:rw;  \n    #        proxy_temp_path         /images/;#图片访问路径  \n    #        proxy_redirect          off;  \n    #        proxy_set_header        Host 127.0.0.1;  \n    #        client_max_body_size    10m;  \n    #        client_body_buffer_size 1280k;  \n    #        proxy_connect_timeout   900;  \n    #        proxy_send_timeout      900;  \n    #        proxy_read_timeout      900;  \n    #        proxy_buffer_size       40k;  \n    #        proxy_buffers           40 320k;  \n    #        proxy_busy_buffers_size 640k;  \n    #        proxy_temp_file_write_size 640k;  \n    #        if ( !-e $request_filename)  \n    #        {  \n    #             proxy_pass  http://127.0.0.1;\n    #        }  \n    # }    \n  \n    #    location / {  \n    #       root   /home/mysite; #html访问路径\n    #       index  index.html index2.htm; #html文件名称\n    #       autoindex on; \n    #       autoindex_exact_size off; \n    #       autoindex_localtime on;  \n    #\n    #    }\n    #\n    #    error_page  404              /404.html; \n    #    \n    #}\n\n    server {  \n        listen       80;  \n        server_name  vote;  \n        location / {  \n            proxy_pass http://127.0.0.1:8000;  \n        }  \n    }\n\t#################################\n\t##以下为node后台的配置项，监听端口88##\n\t#################################\n    server {\n        listen       88;\n        server_name  mysite;\n        location / {\n            proxy_pass http://127.0.0.1:8888;\n        }\n    }\n}\n```\n\n\n为了方便，我之前把配置文件存在了/home下，然后用软连接把它链接到默认配置路径下：\n\n\tln -s /home/nginx.conf /etc/nginx/nginx.conf\n\n测试一下：\n\n```\nroot@vultr:~# nginx -t\nnginx: the configuration file /etc/nginx/nginx.conf syntax is ok\nnginx: configuration file /etc/nginx/nginx.conf test is successful\n```\n\n完美！以后启动服务参数都不用传了\n\n#### nginx 相关指令\n重启的话，直接用进程管理kill掉就好\n```\n//查找nginx进程\nps -ef|grep nginx\n//killjin进程，传进去id\n<id>\n```\n\n或者\n\n\tnginx -s reload\n\n\n## git相关操作\nangular2在项目build的时候不是刷新build文件夹内的内容，而是直接删除文件夹然后重建，这就导致了每次都要重新敲一遍命令初始化git目录\n\n好烦啊😡\n\n记一下 回来好ctrl+c ctrl+v\n\n```\ngit init\ngit remote add <remote名> <git地址>\ngit add -A\ngit commit -m 'commit内容'\ngit push -u <remote名> <分支名> \n//强制推送\ngit push -f <remote名> <分支名> \n\n```\n\n## （补充）angular2 相关操作\n\n\n本来想把整个angular项目放到coding或github的pages上面，后来试了试，虽然能用也很快，可是出现了无法重定向的问题。想了一下，因为pages服务只支持静态页，所以当通过浏览器进行路由重定向的时候，pages会直接去访问对应路径下的index.html文件，当然肯定是不存在的，所以出了404错误\n\n### 解决办法\ngoogle之后，发现一个比较简单的解决办法：重定向是一定会404的，那就干脆把项目放到服务器上用nginx来处理，监测到404就重定向回主页（主页肯定存在的吧），这样虽然用户交互不是很好，但是好使。\n\n### nginx配置\n更改nginx.conf在http定义区域加入： `fastcgi_intercept_errors on;`\n\n在server 区域加入： `error_page 404 = <相对root的路径> 或者 error_page 404 = <网址>`。这个配置项同样适用于其他错误代码\n\nserver配置项写好了长这样：\n\n```\n    server {\n        listen       80;\n        server_name  mysite_front_end;\n        error_log /home/front_end.log;\n        location / {\n            root /home/mysite_front_end;\n            index index.html;\n        }\n        error_page 404 = /index.html;\n    }\n```\n\n\n\n\n\n\n\n\n",
        "labels": [
            "web",
            "first_try",
            "javascript",
            "express",
            "mongoDB",
            "angular2"
        ],
        "categories": [
            "coding"
        ]
    },
    {
        "title": "博客开发问题总结(前端部分)",
        "date": "2017-03-30 02:56:04",
        "section": "之前说有时间会补完开发过程的，敬业先锋是不会摸的，你看这不就来了吗。\n\n决定用angular2的时候我是比较慌的，所以开始的时候啥也没写，先去遛一遍[官方文档](https://angular.cn/)。这是我学习新东西的一贯风格，我喜欢把能看的都看了，心里有个底再开始写。当然我是非常不推荐这种学习方式的，太费时间了，而且是东西多的话就狗熊掰棒子了。多亏google爸爸汉化了全部的文档，看起来还快点，但是还是断断续续看了半个月。\n\n好了言归正传，我会从页面设计和后台逻辑等方面来总结，下面就开始了\n\n",
        "rest": "\n\n## 设计\ncss 我学的不是很好，所以压根就就没自己写，用的[matreialize](www.materialscss.com)前端样式框架（我很喜欢google的matreial design）\n\n排版用的左右结构，讲真版面设计我不是很擅长，当时考虑用什么样的排版的时候浪费了很久，最后还是放弃思考了，看到matreialize主页的排版挺不错的，就部分copy拿过来用了。\n\n### 响应式框架\nmatreialize的主页用的就是自己的框架，还是响应式的（支持手机等不同大小的设备而不出现排版错误的问题），本来直接拿来用很爽的，可是copy过来的代码直接放我这里会不正常显示，考虑了一下估计是它主页的那套css是老版本的，新版本的部分样式class改了。那没办法，用到的地方自己改咯。\n\n思考了一下，就一个小博客真的需要做到响应式吗，就我自己而言我是不会在手机上看的，但要是我写了个文章发了个说说，肯定大部分人用手机点开看（大部分人看qq空间都是用手机吧），不做成响应式很丑的。可是我真的在乎吗，要是不在乎的话为什么要发说说呢？不是很懂我自己。。。。\n\n### 基本结构\n基本结构是左右结构，左边是导航，有post，github，about三项，想再弄个选项放之前自己搞的那些小东西，不过后来想了想可以放到子域名，博客就放文章就好。\n\n右边的话，写的时候出现了右边模块撑到了全宽度，一部分被左边的导航栏覆盖了的情况，我暂时的解决办法是写了个angular的derective，事件监听宽度，动态改变左右组建的屏占宽度百分比（右边直接margin过去），导航在小屏幕的时候直接隐藏。\n\n### topbanner\n右边是具体内容，最上面贴顶蓝色一大块显示当前主题或标题（个人简介页的话就显示‘about’，文章页的话就显示文章标题），我就封装成了个叫topbanner的组建。\n\n这个组建有个问题到现在还是没解决，一旦该显示的内容过长就出格了，暂时的解决办法是加了个truncate的class（出格自动缩短，用。。。省略），以后打算改成自动换行的或者自适应缩小字号的样式，强制一行显示。\n\n### footer \n也不知道怎么就开始流行在footer写‘自豪的使用XXX’这样的话的，有点中二，不过可以装逼。当然我也得写一个。\n\nfooter的宽度出界的问题也是用derective解决的，为了好看，好多css都是写死的，强行把样子摆了出来，回来又时间是要改的。\n\n## 逻辑\nangular2刷新了我对前端的定义，感觉十分的强大，但同样有人说它太‘重’了，开学后互相吹逼的时候涵妹就和我说你写的太麻烦了。既然以后想要干前端，框架肯定是会用到的，用自己的博客来试试水，感觉还是可行的，谁又会关心你用什么框架写的呢。\n\n### 层级注入\nangular2通过声明components和derectives，添加数据提供商（服务），以及引入module，可以对组建进行树状管理，配以十分简洁的注入方式，能让项目结构变的十分的明了。\n\n当然问题也是碰到不少，假如存在这样的结构：爷爷组建-父组建-子组建，爷爷组建就没有办法使用子组建，因为爷爷组建所在的module只引入了父组建所在的module或者直接声明了父组件，和子组建没有直接的联系。当然你也可以用平铺的结构，把所有的组件都注入到根module里，但是文档里也说了，不建议这么写，结构太不明确了。\n\n### 后台数据访问\n最初不打算使用后台一大部分是因为跨域访问的问题，我当时试了angular封装的jsonp，直接给我劝退了，根本没法用。\n\n后来加了后台之后鼓起勇气重新试了试发现jsonp还是不能用，google之后发现stackoverflow上好多人也有同样的问题，有人说是bug，更新包版本了之后没在出过问题，同时我也发现callback参数和url直接拼成字符串是没法使的，一定要创建个`URLSearchParams`对象，把callback set进去最后传给jsonp.get()才可以，我知道angular运行的时候会修改callback的值，但是为什么直接拼字符串就不行我不是很能理解，等什么时候有兴趣看看它源码估计就知道了。\n\n### markdown 代码highlight\n这个问题苦恼了我一晚上，导致我那天修仙到快5点。\n\n主要原因是highlight.js并没有提供直接着色代码的函数，只提供了renderOnLoad：当页面加载的时候进行着色，然而在我这里不现实的，因为angular的路由跳转没有页面刷新，所以在着色器运行的时候，我的文章还没有插到页面里面。。。\n\n但是多亏了markdown包提供了自定义渲染器的功能，研究highlight.js渲染好的代码我发现他就是给`<code>`标签加了`lang-<语言名>` ` hljs`两个class，然后在外面套了个`<pre>`。这就简单了，直接把markdown渲染器改了不就完事了，顺便解决了字体问题。\n\n### Pormise 和 RxJs\n之前写three.js的3D音乐播放器的时候就听说了promise这个东西，主要是解决回调地狱的问题，让代码结构更明了。promise主要用在了后端上了，简直爽到，这回的文章说的是前端的事，promise回来再说。\n\nRxJs这个东西，其实到现在我也不是很了解，但是我知道它是用来处理异步操作的，因为angular的http操作都是Observable的所以用的也比较熟练了。前一阵看了个讲Observable对象的[视频](https://vimeo.com/144625829)，里面有个点很精辟：‘Like a Promise and an Array, but cancellable’，讲的很棒推荐看到这篇文章的人都去看看。\n\n\n## 总结\n在写这个文章的时候我想了很多，但是感觉没必要都写进去了。新手犯的错误，有空翻出来代码看看，就再也不会犯了（主要是我太懒，懒得打这么多字，这文章已经够长的了）。\n\n感觉CSS是我的短板，界面设计真心苦手啊，买了本《CSS权威指南》，书也够贵的，好好学吧。\n\n这次开发经历算是对前端的第一次了解吧，从此开始入门了。\n",
        "labels": [
            "first_try",
            "javascript",
            "angular2",
            "typescript"
        ],
        "categories": [
            "coding"
        ]
    },
    {
        "title": "Nginx开启Gzip压缩方法",
        "date": "2017-09-05 03:25:01",
        "section": "部分非原创，转载自[这里](http://www.veryhuo.com/a/view/51706.html)。\n\n很多人和我反应我博客加载速度慢，我去看了一下，影响加载速度的是angular 生成的两个js包：main和vendor。这两个包大小都到了MB的级别，非常影响体验，准备加上gzip压缩一下。\n\n",
        "rest": "\n## 直接上配置项\n配置nginx.conf的http域，修改或加入\n\n``` bash\ngzip on;\ngzip_min_length 1k;\ngzip_buffers 4 16k;\n#gzip_http_version 1.0;\ngzip_comp_level 2;\ngzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;\ngzip_vary off;\ngzip_disable \"MSIE [1-6]\\.\";\n```\n\n下面解释一下：\n\n第1行：开启Gzip\n\n第2行：不压缩临界值，大于1K的才压缩，一般不用改\n\n第3行：buffer，就是，嗯，算了不解释了，不用改\n\n第4行：用了反向代理的话，末端通信是HTTP/1.0，有需求的应该也不用看我这科普文了；有这句的话注释了就行了，默认是HTTP/1.1\n\n第5行：压缩级别，1-10，数字越大压缩的越好，时间也越长，看心情随便改吧\n\n第6行：进行压缩的文件类型，缺啥补啥就行了，JavaScript有两种写法（__原文写错了，其实有三种__），最好都写上吧，总有人抱怨js文件没有压缩，其实多写一种格式就行了\n\n第7行：跟Squid等缓存服务有关，on的话会在Header里增加\"Vary: Accept-Encoding\"，我不需要这玩意，自己对照情况看着办吧\n\n第8行：IE6对Gzip不怎么友好，不给它Gzip了\n\n## 刷新一下\n``` shell\nnginx -s reload\n```\n\n用curl测试Gzip是否成功开启，直接找原来最大的那个main.bundle.js\n\n``` shell\ncurl -I -H \"Accept-Encoding: gzip, deflate\" \"http://www.zcwsr.com/main.3eff9b221abeec868920.bundle.js\"\n\nHTTP/1.1 200 OK\nServer: nginx/1.6.2\nDate: Thu, 20 Apr 2017 01:49:51 GMT\nContent-Type: application/javascript\nLast-Modified: Fri, 07 Apr 2017 03:27:58 GMT\nConnection: keep-alive\nContent-Encoding: gzip\n```\nchrome控制台看了一下，才300多K\n\n__爽到__",
        "labels": [
            "web",
            "nginx"
        ],
        "categories": [
            "coding"
        ]
    },
    {
        "title": "目前的规划",
        "date": "2017-04-20 14:14:25",
        "section": "js、ts之类的写久了，让我产生了一种以后一定要当前端工程师的错觉，明明写了两三年的java，c#，现在都没了兴趣，可能我真的适合干前端，可能真的不是错觉，至少现在我喜欢它。\n\n之前也从工作了的学长的闲言碎语里也听说了，现在为了省事大家都在从native app转到web app，已然是一种趋势，native react的主页也说了能做到：learn once，write anywhere。这么看来write once， run anywhere的时代也不远了，我相信自己选择了一个正确的方向，毕竟从上大学开始就一直在技术上追求新的东西。\n\n",
        "rest": "\n喜欢是不够的，不去追求新的东西，不把它们都学会了，有什么资格去说喜欢！shut up and show me your code ！\n\n既然说以后要去当前端工程师，自然h5相关以及主流前端框架都是需要掌握的。在毕业，不，在找到实习工作之前，我给自己定下了几个不能算是学习计划的小计划（不分时间前后）：\n\n### H5\n1. 因为怕出错，一直在写ts，用的还是es6，计划掌握并适应es5的写法。\n2. 为了更加的了解js，有时间的话打算看看jquery的源码，参加WTM的时候问了孟老师，老师也是这么建议我的，最好能写出个jq的插件。\n3. 重构博客的时候我自己也注意到了，css是我的短板，计划在熟练使用css3的情况下写出自己的前端框架。\n\n### 前端\n1. angular2算是会用了（熟练使用还是不行），但是现在热门的前端框架有3个啊，vue和react都是得会的，计划用这两个框架写点小玩意，之前想过，能做个konachan镜像站的伪镜像站，感觉挺简单的。\n2. native react也是要学的，虽然没写过android或是ios的native app，但是也不影响我去学写web app。\n\n这些东西我不管别人会不会，为了以后能有资本和别人竞争，反正我是要学会的，难不难自己不不去踩踩坑怎么能知道呢。\n\n因为喜欢可能学起来会轻松点吧。",
        "labels": [
            "web"
        ],
        "categories": [
            "ramble"
        ]
    },
    {
        "title": "MongoDB创建用户",
        "date": "2017-05-22 12:29:23",
        "section": "前两天登博客查东西的时候发现所有文章都不见了，直接连数据库一看，就剩下了一个名为YOUR_DATABASE_HAS_BEEN_DROPED（后来给删了，好像是这个来着）的库，里面一张表里附带一句话，翻译过来就是：你的数据库被我drop啦，给我付0.3比特币来恢复，不付钱的话每24小时清一次哦。\n\n之前是cc我的api接口，现在又直接drop我数据库。我TM也是活该，默认配置都没改，没密码能随便连，嘿呀好气啊。虽然数据都没丢，留了本地的文章备份，但还是乖乖上用户权限加密码换端口一套活儿吧。\n\n",
        "rest": "\n出于懒得写以及安全的原因，以下均使用转载的内容，文章转自：[http://www.cnblogs.com/zhoujinyi/p/4610050.html](http://www.cnblogs.com/zhoujinyi/p/4610050.html)\n\n## 摘要\n\nMongoDB 3.0 安全权限访问控制，在添加用户上面3.0版本和之前的版本有很大的区别，这里就说明下3.0的添加用户的方法。\n\n## 环境、测试\n\n在安装MongoDB之后，先关闭auth认证，进入查看数据库，只有一个local库，admin库是不存在的：\n\n```bash\nroot@zhoujinyi:/usr/local/mongo4# mongo --port=27020\nMongoDB shell version: 3.0.4\nconnecting to: 127.0.0.1:27020/test\n2015-06-29T09:31:08.673-0400 I CONTROL  [initandlisten] \n> show dbs;\nlocal  0.078GB\n```\n\n现在需要创建一个帐号，该账号需要有grant权限，即：账号管理的授权权限。注意一点，帐号是跟着库走的，所以在指定库里授权，必须也在指定库里验证(auth)。\n\n```bash\n> use admin\nswitched to db admin\n> db.createUser(\n...   {\n...     user: \"dba\",\n...     pwd: \"dba\",\n...     roles: [ { role: \"userAdminAnyDatabase\", db: \"admin\" } ]\n...   }\n... )\nSuccessfully added user: {\n    \"user\" : \"dba\",\n    \"roles\" : [\n        {\n            \"role\" : \"userAdminAnyDatabase\",\n            \"db\" : \"admin\"\n        }\n    ]\n}\n```\n\nuser：用户名\n\npwd：密码\n\nroles：指定用户的角色，可以用一个空数组给新用户设定空角色；在roles字段,可以指定内置角色和用户定义的角色。role里的角色可以选：\n\n```bash\nBuilt-In Roles（内置角色）：\n    1. 数据库用户角色：read、readWrite;\n    2. 数据库管理角色：dbAdmin、dbOwner、userAdmin；\n    3. 集群管理角色：clusterAdmin、clusterManager、clusterMonitor、hostManager；\n    4. 备份恢复角色：backup、restore；\n    5. 所有数据库角色：readAnyDatabase、readWriteAnyDatabase、userAdminAnyDatabase、dbAdminAnyDatabase\n    6. 超级用户角色：root  \n    // 这里还有几个角色间接或直接提供了系统超级用户的访问（dbOwner 、userAdmin、userAdminAnyDatabase）\n    7. 内部角色：__system\n```\n\n具体角色：\n\n```bash\nRead：允许用户读取指定数据库\nreadWrite：允许用户读写指定数据库\ndbAdmin：允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问system.profile\nuserAdmin：允许用户向system.users集合写入，可以找指定数据库里创建、删除和管理用户\nclusterAdmin：只在admin数据库中可用，赋予用户所有分片和复制集相关函数的管理权限。\nreadAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读权限\nreadWriteAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读写权限\nuserAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的userAdmin权限\ndbAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的dbAdmin权限。\nroot：只在admin数据库中可用。超级账号，超级权限\n```\n\n刚建立了 userAdminAnyDatabase 角色，用来管理用户，可以通过这个角色来创建、删除用户。验证：需要开启auth参数。\n\n```bash\nroot@zhoujinyi:/usr/local/mongo4# mongo --port=27020\nMongoDB shell version: 3.0.4\nconnecting to: 127.0.0.1:27020/test\n> show dbs;    ####没有验证，导致没权限。\n2015-06-29T10:02:16.634-0400 E QUERY    Error: listDatabases failed:{\n    \"ok\" : 0,\n    \"errmsg\" : \"not authorized on admin to execute command { listDatabases: 1.0 }\",\n    \"code\" : 13\n}\n    at Error (<anonymous>)\n    at Mongo.getDBs (src/mongo/shell/mongo.js:47:15)\n    at shellHelper.show (src/mongo/shell/utils.js:630:33)\n    at shellHelper (src/mongo/shell/utils.js:524:36)\n    at (shellhelp2):1:1 at src/mongo/shell/mongo.js:47\n> use admin        #验证，因为在admin下面添加的帐号，所以要到admin下面验证。\nswitched to db admin\n> db.auth('dba','dba')\n1\n> show dbs;\nadmin  0.078GB\nlocal  0.078GB\n> use test        #在test库里创建帐号\nswitched to db test\n> db.createUser(\n...     {\n...       user: \"zjyr\",\n...       pwd: \"zjyr\",\n...       roles: [\n...          { role: \"read\", db: \"test\" }    #只读帐号\n...       ]\n...     }\n... )\nSuccessfully added user: {\n    \"user\" : \"zjyr\",\n    \"roles\" : [\n        {\n            \"role\" : \"read\",\n            \"db\" : \"test\"\n        }\n    ]\n}\n> db.createUser(\n...     {\n...       user: \"zjy\",\n...       pwd: \"zjy\",\n...       roles: [\n...          { role: \"readWrite\", db: \"test\" }   #读写帐号\n...       ]\n...     }\n... )\nSuccessfully added user: {\n    \"user\" : \"zjy\",\n    \"roles\" : [\n        {\n            \"role\" : \"readWrite\",                #读写账号\n            \"db\" : \"test\"\n        }\n    ]\n}\n> show users;                                    #查看当前库下的用户\n{\n    \"_id\" : \"test.zjyr\",\n    \"user\" : \"zjyr\",\n    \"db\" : \"test\",\n    \"roles\" : [\n        {\n            \"role\" : \"read\",\n            \"db\" : \"test\"\n        }\n    ]\n}\n{\n    \"_id\" : \"test.zjy\",\n    \"user\" : \"zjy\",\n    \"db\" : \"test\",\n    \"roles\" : [\n        {\n            \"role\" : \"readWrite\",\n            \"db\" : \"test\"\n        }\n    ]\n}\n```\n\n上面创建了2个帐号，现在验证下：验证前提需要一个集合\n\n```bash\n> db.abc.insert({\"a\":1,\"b\":2})              #插入失败，没有权限，userAdminAnyDatabase 权限只是针对用户管理的，对其他是没有权限的。\nWriteResult({\n    \"writeError\" : {\n        \"code\" : 13,\n        \"errmsg\" : \"not authorized on test to execute command { insert: \\\"abc\\\", documents: [ { _id: ObjectId('55915185d629831d887ce2cb'), a: 1.0, b: 2.0 } ], ordered: true }\"\n    }\n})\n> \nbye\nroot@zhoujinyi:/usr/local/mongo4# mongo --port=27020\nMongoDB shell version: 3.0.4\nconnecting to: 127.0.0.1:27020/test\n> use test\nswitched to db test\n> db.auth('zjy','zjy')       #用创建的readWrite帐号进行写入\n1\n> db.abc.insert({\"a\":1,\"b\":2})\nWriteResult({ \"nInserted\" : 1 })\n> db.abc.insert({\"a\":11,\"b\":22})\nWriteResult({ \"nInserted\" : 1 })\n> db.abc.insert({\"a\":111,\"b\":222})\nWriteResult({ \"nInserted\" : 1 })\n> db.abc.find()\n{ \"_id\" : ObjectId(\"559151a1b78649ebd8316853\"), \"a\" : 1, \"b\" : 2 }\n{ \"_id\" : ObjectId(\"559151cab78649ebd8316854\"), \"a\" : 11, \"b\" : 22 }\n{ \"_id\" : ObjectId(\"559151ceb78649ebd8316855\"), \"a\" : 111, \"b\" : 222 }\n> db.auth('zjyr','zjyr')       #切换到只有read权限的帐号\n1\n> db.abc.insert({\"a\":1111,\"b\":2222})  #不能写入\nWriteResult({\n    \"writeError\" : {\n        \"code\" : 13,\n        \"errmsg\" : \"not authorized on test to execute command { insert: \\\"abc\\\", documents: [ { _id: ObjectId('559151ebb78649ebd8316856'), a: 1111.0, b: 2222.0 } ], ordered: true }\"\n    }\n})\n> db.abc.find()        #可以查看\n{ \"_id\" : ObjectId(\"559151a1b78649ebd8316853\"), \"a\" : 1, \"b\" : 2 }\n{ \"_id\" : ObjectId(\"559151cab78649ebd8316854\"), \"a\" : 11, \"b\" : 22 }\n{ \"_id\" : ObjectId(\"559151ceb78649ebd8316855\"), \"a\" : 111, \"b\" : 222 }\n```\n\n有没有一个超级权限？不仅可以授权，而且也可以对集合进行任意操作？答案是肯定的，只是不建议使用。那就是role角色设置成root。\n\n```bash\n> db.auth('dba','dba')\n1\n> db.createUser(\n...  {\n...    user: \"zhoujinyi\",\n...    pwd: \"zhoujinyi\",\n...    roles: [\n...       { role: \"root\", db: \"admin\" }      #超级root帐号\n...    ]\n...  }\n... )\nSuccessfully added user: {\n    \"user\" : \"zhoujinyi\",\n    \"roles\" : [\n        {\n            \"role\" : \"root\",\n            \"db\" : \"admin\"\n        }\n    ]\n}\n> \n> show users;              #查看当前库下的用户\n{\n    \"_id\" : \"admin.dba\",\n    \"user\" : \"dba\",\n    \"db\" : \"admin\",\n    \"roles\" : [\n        {\n            \"role\" : \"userAdminAnyDatabase\",\n            \"db\" : \"admin\"\n        }\n    ]\n}\n{\n    \"_id\" : \"admin.zhoujinyi\",\n    \"user\" : \"zhoujinyi\",\n    \"db\" : \"admin\",\n    \"roles\" : [\n        {\n            \"role\" : \"root\",\n            \"db\" : \"admin\"\n        }\n    ]\n}\n> use admin\nswitched to db admin\n> db.auth('zhoujinyi','zhoujinyi')\n1\n> use test\nswitched to db test\n> db.abc.insert({\"a\":1,\"b\":2})\nWriteResult({ \"nInserted\" : 1 })\n> db.abc.insert({\"a\":1111,\"b\":2222})          #权限都有\nWriteResult({ \"nInserted\" : 1 })\n> db.abc.find()\n{ \"_id\" : ObjectId(\"5591539bb78649ebd8316857\"), \"a\" : 1, \"b\" : 2 }\n{ \"_id\" : ObjectId(\"559153a0b78649ebd8316858\"), \"a\" : 1111, \"b\" : 2222 }\n> db.abc.remove({})\nWriteResult({ \"nRemoved\" : 2 })\n```\n\n因为帐号都是在当前需要授权的数据库下授权的，那要是不在当前数据库下会怎么样？\n\n```bash\n> db\nadmin\n> db.createUser(\n...  {\n...    user: \"dxy\",\n...    pwd: \"dxy\",\n...    roles: [\n...       { role: \"readWrite\", db: \"test\" },     #在当前库下创建其他库的帐号，在admin库下创建test、abc库的帐号\n...       { role: \"readWrite\", db: \"abc\" }         \n...    ]\n...  }\n... )\nSuccessfully added user: {\n    \"user\" : \"dxy\",\n    \"roles\" : [\n        {\n            \"role\" : \"readWrite\",\n            \"db\" : \"test\"\n        },\n        {\n            \"role\" : \"readWrite\",\n            \"db\" : \"abc\"\n        }\n    ]\n}\n> \n> show users;\n{\n    \"_id\" : \"admin.dba\",\n    \"user\" : \"dba\",\n    \"db\" : \"admin\",\n    \"roles\" : [\n        {\n            \"role\" : \"userAdminAnyDatabase\",\n            \"db\" : \"admin\"\n        }\n    ]\n}\n{\n    \"_id\" : \"admin.zhoujinyi\",\n    \"user\" : \"zhoujinyi\",\n    \"db\" : \"admin\",\n    \"roles\" : [\n        {\n            \"role\" : \"root\",\n            \"db\" : \"admin\"\n        }\n    ]\n}\n{\n    \"_id\" : \"admin.dxy\",\n    \"user\" : \"dxy\",\n    \"db\" : \"admin\",\n    \"roles\" : [\n        {\n            \"role\" : \"readWrite\",\n            \"db\" : \"test\"\n        },\n        {\n            \"role\" : \"readWrite\",\n            \"db\" : \"abc\"\n        }\n    ]\n}\n> use test\nswitched to db test\n> db.auth('dxy','dxy')          #在admin下创建的帐号，不能直接在其他库验证，\nError: 18 Authentication failed.\n0\n> use admin\nswitched to db admin            #只能在帐号创建库下认证，再去其他库进行操作。\n> db.auth('dxy','dxy')\n1\n> use test\nswitched to db test\n> db.abc.insert({\"a\":1111,\"b\":2222})\nWriteResult({ \"nInserted\" : 1 })\n> use abc\nswitched to db abc\n> db.abc.insert({\"a\":1111,\"b\":2222})\nWriteResult({ \"nInserted\" : 1 })\n\n```\n\n上面更加进一步说明数据库帐号是跟着数据库来走的，哪里创建哪里认证。\n\n创建了这么多帐号，怎么查看所有帐号？\n\n```bash\n>  use admin\nswitched to db admin\n> db.auth('dba','dba')\n1\n> db.system.users.find().pretty()\n{\n    \"_id\" : \"admin.dba\",\n    \"user\" : \"dba\",\n    \"db\" : \"admin\",\n    \"credentials\" : {\n        \"SCRAM-SHA-1\" : {\n            \"iterationCount\" : 10000,\n            \"salt\" : \"KfDUzCOIUo7WVjFr64ZOcQ==\",\n            \"storedKey\" : \"t4sPsKG2dXnZztVYj5EgdUzT9sc=\",\n            \"serverKey\" : \"2vCGiq9NIc1zKqeEL6VvO4rP26A=\"\n        }\n    },\n    \"roles\" : [\n        {\n            \"role\" : \"userAdminAnyDatabase\",\n            \"db\" : \"admin\"\n        }\n    ]\n}\n{\n    \"_id\" : \"test.zjyr\",\n    \"user\" : \"zjyr\",\n    \"db\" : \"test\",\n    \"credentials\" : {\n        \"SCRAM-SHA-1\" : {\n            \"iterationCount\" : 10000,\n            \"salt\" : \"h1gOW3J7wzJuTqgmmQgJKQ==\",\n            \"storedKey\" : \"7lkoANdxM2py0qiDBzFaZYPp1cM=\",\n            \"serverKey\" : \"Qyu6IRNyaKLUvqJ2CAa/tQYY36c=\"\n        }\n    },\n    \"roles\" : [\n        {\n            \"role\" : \"read\",\n            \"db\" : \"test\"\n        }\n    ]\n}\n{\n    \"_id\" : \"test.zjy\",\n    \"user\" : \"zjy\",\n    \"db\" : \"test\",\n    \"credentials\" : {\n        \"SCRAM-SHA-1\" : {\n            \"iterationCount\" : 10000,\n            \"salt\" : \"afwaKuTYPWwbDBduQ4Hm7g==\",\n            \"storedKey\" : \"ebb2LYLn4hiOVlZqgrAKBdStfn8=\",\n            \"serverKey\" : \"LG2qWwuuV+FNMmr9lWs+Rb3DIhQ=\"\n        }\n    },\n    \"roles\" : [\n        {\n            \"role\" : \"readWrite\",\n            \"db\" : \"test\"\n        }\n    ]\n}\n{\n    \"_id\" : \"admin.zhoujinyi\",\n    \"user\" : \"zhoujinyi\",\n    \"db\" : \"admin\",\n    \"credentials\" : {\n        \"SCRAM-SHA-1\" : {\n            \"iterationCount\" : 10000,\n            \"salt\" : \"pE2cSOYtBOYevk8tqrwbSQ==\",\n            \"storedKey\" : \"TwMxdnlB5Eiaqg4tNh9ByNuUp9A=\",\n            \"serverKey\" : \"Mofr9ohVlFfR6/md4LMRkOhXouc=\"\n        }\n    },\n    \"roles\" : [\n        {\n            \"role\" : \"root\",\n            \"db\" : \"admin\"\n        }\n    ]\n}\n{\n    \"_id\" : \"admin.dxy\",\n    \"user\" : \"dxy\",\n    \"db\" : \"admin\",\n    \"credentials\" : {\n        \"SCRAM-SHA-1\" : {\n            \"iterationCount\" : 10000,\n            \"salt\" : \"XD6smcWX4tdg/ZJPoLxxRg==\",\n            \"storedKey\" : \"F4uiayykHDp/r9krAKZjdr+gqjM=\",\n            \"serverKey\" : \"Kf51IU9J3RIrB8CFn5Z5hEKMSkw=\"\n        }\n    },\n    \"roles\" : [\n        {\n            \"role\" : \"readWrite\",\n            \"db\" : \"test\"\n        },\n        {\n            \"role\" : \"readWrite\",\n            \"db\" : \"abc\"\n        }\n    ]\n}\n> db.system.users.find().count()\n5\n```\n\n备份还原使用那个角色的帐号？之前创建的帐号zjy:test库读写权限；zjyr:test库读权限\n\n```bash\nroot@zhoujinyi:~# mongodump --port=27020 -uzjyr -pzjyr --db=test -o backup   #只要读权限就可以备份\n2015-06-29T11:20:04.864-0400    writing test.abc to backup/test/abc.bson\n2015-06-29T11:20:04.865-0400    writing test.abc metadata to backup/test/abc.metadata.json\n2015-06-29T11:20:04.866-0400    done dumping test.abc\n2015-06-29T11:20:04.867-0400    writing test.system.indexes to backup/test/system.indexes.bson\n\n\nroot@zhoujinyi:~# mongorestore --port=27020 -uzjy -pzjy --db=test backup/test/  #读写权限可以进行还原\n2015-06-29T11:20:26.607-0400    building a list of collections to restore from backup/test/ dir\n2015-06-29T11:20:26.609-0400    reading metadata file from backup/test/abc.metadata.json\n2015-06-29T11:20:26.609-0400    restoring test.abc from file backup/test/abc.bson\n2015-06-29T11:20:26.611-0400    error: E11000 duplicate key error index: test.abc.$_id_ dup key: { : ObjectId('559154efb78649ebd831685a') }\n2015-06-29T11:20:26.611-0400    restoring indexes for collection test.abc from metadata\n2015-06-29T11:20:26.612-0400    finished restoring test.abc\n2015-06-29T11:20:26.612-0400    done\n```",
        "labels": [
            "web",
            "mongoDB"
        ],
        "categories": [
            "coding"
        ]
    },
    {
        "title": "ubuntu 安装升级java版本",
        "date": "2017-08-17 01:47:32",
        "section": "转载并修改自[这里](http://blog.csdn.net/shenshendeai/article/details/54133270)\n\n写项目后台的人在最新的项目上用了lambda表达式，没办法只能用1.8了， 但服务器一般都是自带1.7，所以升级一下\n\nubuntu 安装jdk 的两种方式:\n\n1. 通过ppa(源) 方式安装.\n\n2. 通过官网下载安装包安装.\n\n这里推荐第1种,因为可以通过 apt-get upgrade 方式方便获得jdk的升级\n\n",
        "rest": "\n### 使用ppa/源方式安装\n#### 添加ppa\n\n```bash\nsudo add-apt-repository ppa:webupd8team/java\nsudo apt-get update\n```\n\n#### 安装oracle-java-installer\n\n```bash\n#jdk7\nsudo apt-get install oracle-java7-installer\n\n#jdk8\nsudo apt-get install oracle-java8-installer\n```\n\n安装器会提示你同意 Oracle 的服务条款,选择 ok\n\n然后选择yes 即可\n\n如果你懒,不想自己手动点击.也可以加入下面的这条命令,默认同意条款:\n\n```bash\n#JDK7 默认选择条款\necho oracle-java7-installer shared/accepted-oracle-license-v1-1 select true | sudo /usr/bin/debconf-set-selections\n\n#JDK8 默认选择条款\necho oracle-java8-installer shared/accepted-oracle-license-v1-1 select true | sudo /usr/bin/debconf-set-selections\n```\n\n接下会是等待(依个人网速定)\n\n如果你因为防火墙或者其他原因,导致installer 下载速度很慢,可以中断操作.然后下载好相应jdk的tar.gz 包,放在:\n\n```bash\n/var/cache/oracle-jdk7-installer             (jdk7) \n/var/cache/oracle-jdk8-installer              (jdk8) \n```\n\n下面,然后安装一次installer. installer 则会默认使用 你下载的tar.gz包\n\n#### 设置系统默认jdk\n\n```bash\n#JDk7\nsudo update-java-alternatives -s java-7-oracle\n\n#JDK8\nsudo update-java-alternatives -s java-8-oracle\n```\n\n如果即安装了jdk7,又安装了jdk8,要实现两者的切换,可以:\n\n```bash\n#jdk8 切换到jdk7\nsudo update-java-alternatives -s java-7-oracle\n\n#jdk7 切换到jdk8\nsudo update-java-alternatives -s java-8-oracle\n```\n#### 测试jdk 是是否安装成功:\n\n```bash\njava -version\njavac -version\n```\n\n### 直接下载jdk压缩包方式安装(这里只介绍jdk7的,jdk8 的原理完全一致)\n\n分为下面5个步骤\n\n1. 官网下载JDK\n\n2. 解压缩,放到指定目录\n\n3. 配置环境变量\n\n4. 设置系统默认JDK\n\n5. 测试jdk\n\n#### 官网下载JDK　　　\n\n地址: [http://www.oracle.com/technetwork/articles/javase/index-jsp-138363.html](http://www.oracle.com/technetwork/articles/javase/index-jsp-138363.html)\n\n选择相应的 .gz包下载 \n\n#### 解压缩,放到指定目录(以jdk-7u60-linux-x64.gz为例)\n\n创建目录:\n\n```bash\nsudo mkdir /usr/lib/jvm\n```\t\t\n\n加压缩到该目录:\n\n```bash\nsudo tar -zxvf jdk-7u60-linux-x64.gz -C /usr/lib/jvm\n```\t\n\n#### 修改环境变量:　\n\n```bash\nsudo vim ~/.bashrc\n```\t\n\n文件的末尾追加下面内容:\n\n```bash\n#set oracle jdk environment\nexport JAVA_HOME=/usr/lib/jvm/jdk1.7.0_60 \nexport JRE_HOME=${JAVA_HOME}/jre  \nexport CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib  \nexport PATH=${JAVA_HOME}/bin:$PATH  \n```\n\n使环境变量马上生效\n\n```\t\nsource ~/.bashrc\n```\t\n\n#### 设置系统默认jdk 版本\n\n```bash\nsudo update-alternatives --install /usr/bin/java java /usr/lib/jvm/jdk1.7.0_60/bin/java 300  \nsudo update-alternatives --install /usr/bin/javac javac /usr/lib/jvm/jdk1.7.0_60/bin/javac 300  \nsudo update-alternatives --install /usr/bin/jar jar /usr/lib/jvm/jdk1.7.0_60/bin/jar 300   \nsudo update-alternatives --install /usr/bin/javah javah /usr/lib/jvm/jdk1.7.0_60/bin/javah 300   \nsudo update-alternatives --install /usr/bin/javap javap /usr/lib/jvm/jdk1.7.0_60/bin/javap 300   \n```\n\n然后执行:\n\n```bash\nsudo update-alternatives --config java\n##若是初次安装jdk,会有下面的提示     \nThere is only one alternative in link group Java (providing /usr/bin/java): \n/usr/lib/jvm/jdk1.7.0_60/bin/java\n##否者,选择合适的jdk\n```\n\n#### 测试jdk\n\n```bash\njava -version\n\njava version \"1.7.0_60\"\n  Java(TM) SE Runtime Environment (build 1.7.0_60-b19)\n  Java HotSpot(TM) 64-Bit Server VM (build 24.60-b09, mixed mode)\n```\n\n得了",
        "labels": [
            "linux"
        ],
        "categories": [
            "coding"
        ]
    },
    {
        "title": "从上篇博客到现在",
        "date": "2017-08-28 13:24:00",
        "section": "为什么这么久没更新博客？\n\n懒\n\n从上一篇到现在都4个月了，虽然一篇没写，但不是啥也没干。也到了找工作的时候了，写点东西总结一下是好事。\n\n这个可能会很长，可能会分p，也可能会坑着，没办法谁让我懒呢。\n\n",
        "rest": "\n### 关于一篇提到的目标\n\n让我先找出来看一下哈。\n\nemmmm，完成的还行。\n\n#### CSS\n\ncss方面学的还行（自我感觉），我写东西喜欢从需求出发，这回学css的主要动力是这个博客的2.0版本重构，原来用materialize用的太不舒心，正好自己写一套。\n\n写个破样式框架，起名字成了难题，想了半天还是起了个中二的，叫HardCore，硬核可还行。\n\n我原本CSS超烂，所以买了本小动物书《CSS权威指南》看，用了两个礼拜吧，差不多过了一遍，就开始写了（之前的文章提到过我有把东西看完再写的臭毛病，狗熊掰棒子）。然后又看了看我子枫同学之前借鉴bootstrap写的那个Hybird，又借鉴了materialize的一部分，最后好歹是怼出来了一个。\n\n具体哪里有什么问题在这片文章的后半段我会写（并没有写），可能不全（根本没写），因为历时太长了有没有记录，但如果有动力的话估计以后会再发文章写出来。\n\n#### 前端框架\n\n还行，不过我还是喜欢Angular2\n\nAngular2(4)本来就不生，要不博客2.0版本咋来的？其余就是React和Vue，React文档官方没有汉化，我也就这么用着mac的三指触摸查词摸着看了，好歹算是看懂了，像我这种刚开始接触前端开发就用的是typescript的原后端开发着，对于开发React用的jsx的语法接受起来并没有什么不适感。\n\n写React的时候给自己定的需求是写个konachan的美化站，一年前学python写爬虫的时候无意间百度到的konachanAPI帮了大忙。\n\n时间上看，学React是在学CSS之前，所以本着能省事就省事的原则，用了有React组件实现的Ant.Design，不得不佩服蚂蚁金融这帮人，真牛逼啊，写出来的组件很好看。\n\n有一点儿小遗憾，本来想把这个写成带路由的，能通过搜索内容改变路由，但是在学react-router的时候遇到了很大的阻碍，让我放弃了，这玩意跨版本写法改变太大了，老版本的没法用不知道为什么。还有一点就是搜索时候的联想框，一个词搜第一遍的时候能显示，第二遍的时候就不显示了，这个破bug让我思考了很久，直到最近，在我重构博客2.0的时候才发现，原来是Observable里用错了一个函数，直接把之后传过来的相同值给拦截了。。。\n\n关于Vue的学习，文档看了看，本来想用它也写个konachan美化站，但是实在是不喜欢他的语法和设计，写起来很难受，不像React那么抽象。结果就放弃了。\n\njQuery没再深度的看，水平和原来没变化。。。。\n\n\n### 关于实习\n\n考了个年纪第4名，稳稳当当进了企业实习，给不给钱不说了，反正现在没发。说说发生的事和项目吧。\n\n去的第一个礼拜，和大健哥一个项目组，项目是前后端分离的，所以（以下是情景再现）：\n\n```\n我：咱们先分个工吧，至少把前后台先分了。\n大健哥：我就想干前端，我后端啥也不会\n我：你庄胖子J2EE的课考个年纪第一，你要是后端不会写那就没人会了（笑。\n大健哥：不行，我就想干前端。\n我：项目组长说前端用Angular，你会写Angular吗？\n大健哥：不会。\n我：。。。。。\n```\n\n傻了\n\n之后别的项目组人少说是要从我们这边抽调人的时候，他又闹了一通，说我们欺负人。那没办法了，我和宝通、子枫一商量：咱仨走吧。\n\n直到我被换到别的组之前，我是没见他看过前端的东西。\n\n怎么还能有这种人呢，惊了。\n\n#### 换组之后接的项目\n\n新组的项目负责人天天忙的不行，好像公司的活都他干一样。好不容易有空开了个会，才知道项目是做个web端的视频会议系统，带文字聊天。感觉他也是刚接触前端，让我们用Vue写然后移动端Weex移植，？？？，不是很懂。\n\n试了半个礼拜，才定下来用基于webRTC的kurento（其他的都是基于flash的，实在不会），看了一下兼容性，官方例子上机一试，安卓部分支持，iOS完全不行，瞬间傻眼，咋办呢？负责人：写原生App吧 众人：。。。。\n\n两个礼拜，算是鼓捣完了，ES6写的，后台对接方便我在express写的fakeserver上测试了，还成。还差禁用自己视频和音频流这块没弄，我是不打算写了，他需求里没和我说，等什么时候负责人和我提这个在写吧。\n\n\n### 最近在干什么\n\n俩礼拜前，晚上回宿舍，干iOS的付同学忽然问我数据结构，我挺奇怪，他平常用不到啊，怎么问我这个，问他，他说最近没活，随便看看。结果两天后，他回来的晚了半个多小时，问了其他舍友，这货考阿里笔试题去了。。。我好傻啊，怎么没注意到。\n\n上网一看，已经到秋招的时候了，方了。\n\n不能再浪了，该准备找工作了\n\n再我来自习室写这篇博客之前，付同学还没有回来，看了下赛码网，今天没有考试，不知道是不是去面试了。。。好嫉妒啊，不能让不如我的人超在我前面。\n\n今天发生了个事，收到了美团的电话面试通知，这个机会超棒，一定要抓住。\n\n说到找工作的事，就要多写两句。我是希望以后能去北京或者其他城市，离开天津是最好的，天津资源太少了，在天津呆了20多年，连大学都是在天津上的，是时候去外面闯荡了。关于这个话题，和老妈聊了很多次，她和我说了很多，能听出来很舍不得。她之前和我说过：第一听你说要离开天津的时候，心里一震，你要是一走，我这也快退了，你爸这么混蛋，家里就我一个人，怎么活啊。 \n\n这话听的我心里难受，为了家人还是未来？\n\n我现在是这么想的，如果真的去了北京，为了家人，也要最少两个礼拜回来一次。\n\n因为，未来和家人都重要。\n\n\n总之，祝愿自己最近的面试和笔试都顺利，先拿到offer再说其他的。",
        "labels": [
            "web"
        ],
        "categories": [
            "ramble"
        ]
    },
    {
        "title": "tar命令的详细解释",
        "date": "2017-09-05 03:22:50",
        "section": "转载自[这里](http://blog.csdn.net/eroswang/article/details/5555415/)\n\n### tar命令\n```shell\n[root@Linux ~]# tar [-cxtzjvfpPN] 文件与目录 ....\n```\n\n",
        "rest": "### 参数\n-c ：建立一个压缩文件的参数指令(create 的意思)；\n\n-x ：解开一个压缩文件的参数指令！\n\n-t ：查看 tarfile 里面的文件！\n\n__特别注意，在参数的下达中， c/x/t 仅能存在一个！不可同时存在！\n因为不可能同时压缩与解压缩。__\n\n-z ：是否同时具有 gzip 的属性？亦即是否需要用 gzip 压缩？\n\n-j ：是否同时具有 bzip2 的属性？亦即是否需要用 bzip2 压缩？\n\n-v ：压缩的过程中显示文件！这个常用，但不建议用在背景执行过程！\n\n-f ：使用档名，请留意，在 f 之后要立即接档名喔！不要再加参数！\n\n__例如使用`tar -zcvfP tfile sfile`就是错误的写法，要写成`tar -zcvPf tfile sfile`才对喔！__\n\n-p ：使用原文件的原来属性（属性不会依据使用者而变）\n\n-P ：可以使用绝对路径来压缩！\n\n-N ：比后面接的日期(yyyy/mm/dd)还要新的才会被打包进新建的文件中！\n\n--exclude FILE：在压缩的过程中，不要将 FILE 打包！\n\n### 范例\n\n范例一：将整个 /etc 目录下的文件全部打包成为 /tmp/etc.tar\n\n```shell\n[root@linux ~]# tar -cvf /tmp/etc.tar /etc <==仅打包，不压缩！\n[root@linux ~]# tar -zcvf /tmp/etc.tar.gz /etc <==打包后，以 gzip 压缩\n[root@linux ~]# tar -jcvf /tmp/etc.tar.bz2 /etc <==打包后，以 bzip2 压缩\n# 特别注意，在参数 f 之后的文件档名是自己取的，我们习惯上都用 .tar 来作为辨识。\n# 如果加 z 参数，则以 .tar.gz 或 .tgz 来代表 gzip 压缩过的 tar file ～\n# 如果加 j 参数，则以 .tar.bz2 来作为附档名啊～\n# 上述指令在执行的时候，会显示一个警告讯息：\n# 『tar: Removing leading `/' from member names』那是关於绝对路径的特殊设定。\n```\n\n范例二：查阅上述 /tmp/etc.tar.gz 文件内有哪些文件？\n\n```shell\n[root@linux ~]# tar -ztvf /tmp/etc.tar.gz\n# 由於我们使用 gzip 压缩，所以要查阅该 tar file 内的文件时，\n# 就得要加上 z 这个参数了！这很重要的！\n```\n\n范例三：将 /tmp/etc.tar.gz 文件解压缩在 /usr/local/src 底下\n\n```shell\n[root@linux ~]# cd /usr/local/src\n[root@linux src]# tar -zxvf /tmp/etc.tar.gz\n# 在预设的情况下，我们可以将压缩档在任何地方解开的！以这个范例来说，\n# 我先将工作目录变换到 /usr/local/src 底下，并且解开 /tmp/etc.tar.gz ，\n# 则解开的目录会在 /usr/local/src/etc 呢！另外，如果您进入 /usr/local/src/etc\n# 则会发现，该目录下的文件属性与 /etc/ 可能会有所不同喔！\n```\n\n范例四：在 /tmp 底下，我只想要将 /tmp/etc.tar.gz 内的 etc/passwd 解开而已\n\n```shell\n[root@linux ~]# cd /tmp\n[root@linux tmp]# tar -zxvf /tmp/etc.tar.gz etc/passwd\n# 我可以透过 tar -ztvf 来查阅 tarfile 内的文件名称，如果单只要一个文件，\n# 就可以透过这个方式来下达！注意到！ etc.tar.gz 内的根目录 / 是被拿掉了！\n```\n\n范例五：将 /etc/ 内的所有文件备份下来，并且保存其权限！\n\n```shell\n[root@linux ~]# tar -zxvpf /tmp/etc.tar.gz /etc\n# 这个 -p 的属性是很重要的，尤其是当您要保留原本文件的属性时！\n```\n\n范例六：在 /home 当中，比 2005/06/01 新的文件才备份\n\n```shell\n[root@linux ~]# tar -N '2005/06/01' -zcvf home.tar.gz /home\n```\n\n范例七：我要备份 /home, /etc ，但不要 /home/dmtsai\n\n```shell\n[root@linux ~]# tar --exclude /home/dmtsai -zcvf myfile.tar.gz /home/* /etc\n```\n\n范例八：将 /etc/ 打包后直接解开在 /tmp 底下，而不产生文件！\n\n```shell\n[root@linux ~]# cd /tmp\n[root@linux tmp]# tar -cvf - /etc | tar -xvf -\n# 这个动作有点像是 cp -r /etc /tmp 啦～依旧是有其有用途的！\n# 要注意的地方在於输出档变成 - 而输入档也变成 - ，又有一个 | 存在～\n# 这分别代表 standard output, standard input 与管线命令啦！\n# 这部分我们会在 Bash shell 时，再次提到这个指令跟大家再解释啰！\n```",
        "labels": [
            "linux"
        ],
        "categories": [
            "coding"
        ]
    },
    {
        "title": "美团二面总结",
        "date": ISODate("2017-09-16T17:05:56.556Z"),
        "section": "GG\n\n回想了一下，犯了丢人的错误\n\nあーあー、恥ずかしい\n\n好好准备，找下一家了",
        "rest": "### post请求跨域\n\n一秒被问住，之前写公司项目的时候碰到了，只记得会用到iframe，太懒没看，吃亏了\n\n正好记一下，什么是跨域访问：\n\n**通过js获取页面中不同的域的数据均属于跨域访问。只要协议、域名、端口有任何一个不同，都会被当作是不同的域**\n\n#### 直接通过XHR2\n\n~~用H5的方法，但是需要服务端带上`Access-Control-Allow-Origin`的头~~\n\n之前写过一个，用`formData`构建表单\n\n（网上查了一下，根本就不用带头好吗，操这题会的啊，之前写的就是啊，没答上来亏了）\n\n关于XHR2的更多用法，请看阮大师的[这篇文章](http://www.ruanyifeng.com/blog/2012/09/xmlhttprequest_level_2.html)\n\n之前自己的实现\n\n```javascript\nfunction uploadFile(url, content) {\n    let formData = new FormData()\n    formData.append('content', imgFile);\n    let xhr = new XMLHttpRequest();\n    let promise = new Promise((resolve, reject) => {\n        xhr.open('POST', url);\n        xhr.onload = () => {\n            if (xhr.status === 200) {\n                resolve(JSON.parse(xhr.responseText).result);\n            } else {\n                reject(xhr.responseText);\n            }\n        }\n        xhr.upload.onprogress = event => {\n            if (event.lengthComputable) {\n                let complete = event.loaded / event.total * 100;\n                console.log(`upload process: ${complete}%`);\n            }\n        }\n        xhr.send(formData);\n    })\n\n    return promise;\n}\n```\n\n亏大了\n\n#### 其他方法\n\n之前看到用iframe的方法，虽然能跨域，但是收不到返回值，很不便利，不写了\n\n\n### js 实现CSS选择器 \n\n当时答的时候思路乱了，现在仔细想了想，实现了一下\n\n```javascript\nfunction selector(str) {\n\tlet ex = str.split(' ');\n\tlet result = [];\n\tlet allEles = document.getElementsByTagName(ex[1]);\n\toutter:\n\tfor (let ele of allEles) {\n\t\tlet tempEle = ele;\n\t\tinner:\n\t\twhile (true) {\n\t\t\t// debugger;\n\t\t\ttempEle = tempEle.parentNode;\n\t\t\tif (tempEle.tagName.toLocaleLowerCase() === ex[0]) {\n\t\t\t\tresult.push(ele);\n\t\t\t\tbreak inner;\n\t\t\t}\n\t\t\telse if (tempEle.tagName.toLocaleLowerCase() === 'body')\n\t\t\t\tbreak inner;\n\t\t}\n\t}\n\treturn result;\n}\nlet divs = selector('div div');\nfor (let div of divs) {\n\tconsole.log(div);\n}\n```\n\n思路很简单，假设输入的是`div div`，分析一下就是获取所有任意一级父级为div的div元素，那么先用`document.getElementsByTagName`获取所有的div元素，然后在用循环查看其父级是否为`div`，直到`body`元素为止。\n\n我写的这个稍微改改能适配class与id的选择，但是有个缺点，三级查找的时候就不行了\n\n### bind() 函数\n\n回答的十分丢人，应该是改变this指针的指向，没过脑子随口说了个是和继承相关。。。\n\nbind()方法创建一个新的函数, 当被调用时，将其this关键字设置为提供的值，在调用新函数时，在任何提供之前提供一个给定的参数序列。（摘自MDN）\n\nMDN的polyfill浏览器兼容（刮腻子）实现：\n\n```javascript\nif (!Function.prototype.bind) {\n  Function.prototype.bind = function (oThis) {\n    if (typeof this !== \"function\") {\n      // closest thing possible to the ECMAScript 5\n      // internal IsCallable function\n      throw new TypeError(\"Function.prototype.bind - what is trying to be bound is not callable\")\n    }\n\n    var aArgs = Array.prototype.slice.call(arguments, 1), \n      fToBind = this, \n      fNOP = function () {},\n      fBound = function () {\n        fBound.prototype = this instanceof fNOP ? new fNOP() : fBound.prototype\n        return fToBind.apply(this instanceof fNOP\n                                 ? this\n                                 : oThis || this,\n                                 aArgs )\n        }   \n//aArgs.concat(Array.prototype.slice.call(arguments));why use concat method instead of aArgs here\n    if( this.prototype ) {\n      // Function.prototype doesn't have a prototype property\n      fNOP.prototype = this.prototype\n    }\n\n    return fBound\n  }\n}\n```\n\n`fToBind = this` 保存了当前对象，方便使用`apply`让当前对象能使用传入的上下文\n\n后面可以直接使用`fBound.prototype = this.prototype`把传入上下文的方法复制过来，但是这样的话，以后一旦操作`fbound`的原型链，也会对原有上下文的原型链造成影响，所以用`fNOP`这样一个空函数做一个转接来解决\n\n上面代码简化如下\n\n```javascript\nfBound.prototype = new fNOP();\nfNOP.prototype = this.prototype;\n```\n\n### DOM2事件\n\n这个根本没听说过，面试官一看我不会就问了我个事件冒泡相关的内容。现在分析起来这个和事件冒泡相关。\n\n#### DOM0\n\nDOM0 有最好的兼容性，和最快的绑定速度，因为它就是写在标签上的\n\n```javascript\n<input onclick=“alert('have been clicked')”>\n```\n\n#### DOM2事件的冒泡和捕获\n\nDOM2是通过addEventListener绑定的事件, 还有IE下的DOM2事件通过attachEvent绑定\n\n`addEventListener`的第三个参数为`useCapture`,是指在DOM树中，注册了该listener的元素，是否会先于它下方的任何事件目标，接收到该事件。沿着DOM树向上冒泡的事件不会触发被指定为use capture（也就是设为true）的listener。当一个元素嵌套了另一个元素，两个元素都对同一个事件注册了一个处理函数时，所发生的事件冒泡和事件捕获是两种不同的事件传播方式。事件传播模式决定了元素以哪个顺序接收事件。如果没有指定，`useCapture`默认为false。 \n\n事件捕获顺序：外-->里\n\n事件冒泡顺序：里-->外\n\n其他描述请见[MDN](https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener)\n\n### LRU\n\njs简单实现了一下\n\n```javascript\nfunction Node(key, value) {\n\tthis.key = key;\n\tthis.value = value;\n\tthis.pre = null;\n\tthis.next = null;\n}\n\nNode.prototype.toString = function(){\n\treturn this.key + '-' + this.value;\n};\n\nfunction LRU(size) {\n\tthis.size = size;\n\tthis.old = null;\n\tthis.new = null;\n\tthis.set = {};\n}\n\nLRU.prototype = {\n\tput(key, value) {\n\t\tvar old = this.set[key];\n\t\tif (old) {\n\t\t\told.value = value;\n\t\t\tthis.remove(old);\n\t\t\tthis.setHead(old);\n\t\t} else {\n\t\t\tvar created = new Node(key, value);\n\t\t\tif (Object.keys(this.set).length >= this.size) {\n\t\t\t\tdelete this.set[this.old.key];\n\t\t\t\tthis.remove(this.old);\n\t\t\t}\n\t\t\tthis.setHead(created);\n\t\t\tthis.set[key] = created;\n\t\t}\n\t\tthis.print('put');\n\n\t},\n\n\tpop(key) {\n\t\tvar getted = this.set[key];\n\t\tif (getted) {\n\t\t\tthis.remove(getted);\n\t\t\tthis.setHead(getted);\n\t\t\tthis.print('pop');\n\t\t\treturn getted.value;\n\t\t} else {\n\t\t\tthis.print('pop');\n\t\t\treturn undefined;\n\t\t}\n\t},\n\n\tremove(node) {\n\t\tif (node.pre) {\n\t\t\tnode.pre.next = node.next;\n\t\t} else {\n\t\t\tthis.new = node.next;\n\t\t}\n\n\t\tif (node.next) {\n\t\t\tnode.next.pre = node.pre;\n\t\t} else {\n\t\t\tthis.old = node.pre;\n\t\t}\n\t},\n\n\tsetHead(node) {\n\t\tnode.next = this.new;\n\t\tnode.pre = null;\n\n\t\tif (this.new) {\n\t\t\tthis.new.pre = node;\n\t\t}\n\n\t\tthis.new = node;\n\n\t\tif (!this.old) {\n\t\t\tthis.old = this.new;\n\t\t}\n\t},\n\n\tprint(ex) {\n\t\tvar result = 'length: ' + Object.keys(this.set).length + ' ' + ex + ': ';\n\t\tresult += this.new.toString() + ' '; \n\t\tvar node = this.new.next;\n\t\twhile (node) {\n\t\t\tresult += node.toString() + ' ';\n\t\t\tnode = node.next;\n\t\t}\n\t\tconsole.log(result);\n\t}\n\n}\n\n\nvar lru = new LRU(4);\n\nlru.put(1, 'z');\nlru.put(2, 'c');\nlru.put(3, 'w');\nlru.put(4, 's');\nlru.put(5, 'r');\nlru.put(1, 'r');\nlru.put(2, 'lkjlkj');\n\nlru.pop(1);\nlru.pop(3);\nlru.pop(4);\n```\n\n结果\n\n```bash\nlength: 1 put: 1-z \nlength: 2 put: 2-c 1-z \nlength: 3 put: 3-w 2-c 1-z \nlength: 4 put: 4-s 3-w 2-c 1-z \nlength: 4 put: 5-r 4-s 3-w 2-c \nlength: 4 put: 1-r 5-r 4-s 3-w \nlength: 4 put: 2-lkjlkj 1-r 5-r 4-s \nlength: 4 pop: 1-r 2-lkjlkj 5-r 4-s \nlength: 4 pop: 1-r 2-lkjlkj 5-r 4-s \nlength: 4 pop: 4-s 1-r 2-lkjlkj 5-r \n```\n\n\n------\n\n我记住的大概就是这些，lru还是没怎么搞懂。回来还得仔细看看。\n\n写完这篇已经是周日了（看了一下表，过了0点），今天上午和晚上都还有其他公司的笔试，该歇了。\n\n说实话，我慌的很。\n\n主要是因为算法题根本没刷过，我从心里抵触这个东西，从过去就是这样，我抵触的东西打死都不想看（真惊奇我能活到现在）。稍微算一下，平常上班没活儿摸鱼+晚上回去自习的时间，都够我刷不少的了，但是我真的讨厌这个啊，内心在找借口不看，现在在写这个就算是自己给自己找的借口。\n\n对于明天的笔试，我是没底的，就不自己奶自己了，尽自己最大的可能去写，勇敢面对吧。\n\n\n",
        "labels": [
            "web",
            "javascript"
        ],
        "categories": [
            "coding"
        ]
    },
    {
        "title": "美团第一次电面总结",
        "date": "2017-09-07 11:16:20",
        "section": "挺意外的，上周五才投的简历，这周一就给我发了面试邀请。？？？不应该是先笔试再面试吗？难道说。。。。\n\n由于比较意外，没怎么好好准备，自己感觉不是很好。人家HR小哥声音温和的很，不会还一步一步的引导我，答不上来我自己都不好意思了。估计是没戏了，但是还是值得总结一下的，以防以后面试再被问类似的问题傻眼。\n\n就在今天，HR给我打电话说一面过了，要找时间二面。本来以为没戏了，忽然就有了！这篇文章一直懒得动，现在不得不写了。",
        "rest": "好紧张啊。。。就明天欸。。。希望自己能把握好这次机会！\n\n### js变量的创建与销毁\n\n部分转载自[这里](http://www.cnblogs.com/kawask/p/6225317.html)\n\n#### 变量提升\n\n举个例子\n\n```javascript\nconsole.log(a); // 报错：Uncaught ReferenceError: a is not defined\n/********/\nconsole.log(a); // undefined\nvar a;\n/********/\nconsole.log(a); // undefined\nvar a = 10;\n```\n\n第一句报错很正常，a未被定义。第二句、第三句都是undefined，说明浏览器在执行`console.log(a)`的时候，已经知道了a是undefined了，但是却不知道a是10（第三句中）。\n\n在js代码被拿出来运行之前，浏览器就已经做了一些准备工作,如上面例子中的第三句，实际是这样的\n\n```javascript\nvar a;\nconsole.log(a);\na = 10;\n```\n\n这也就是所谓的 __变量提升__\n\n在ES6之前，JavaScript没有块级作用域(一对花括号{}即为一个块级作用域)，只有全局作用域和函数作用域。变量提升即将变量声明提升到它所在作用域的最开始的部分。\n\n```javascript\nconsole.log(global); // undefined\nvar global = 'global';\nconsole.log(global); // global\n \nfunction fn () {\n　　console.log(a); // undefined\n　　var a = 'aaa';\n　　console.log(a); // aaa\n}\nfn();\n```\n\n之所以会是以上的打印结果，是由于js的变量提升，实际上上面的代码是按照以下来执行的\n\n```javascript\nvar global; // 变量提升，全局作用域范围内，此时只是声明，并没有赋值\nconsole.log(global); // undefined\nglobal = 'global'; // 此时才赋值\nconsole.log(global); // 打印出global\n \nfunction fn () {\n　　var a; // 变量提升，函数作用域范围内\n　　console.log(a);\n　　a = 'aaa';\n　　console.log(a);\n}\nfn();\n```\n\n#### 函数提升\n\njs中创建函数有两种方式：函数声明式和函数字面量式。只有函数声明才存在函数提升！如\n\n```javascript\nconsole.log(f1); // function f1() {}   \nconsole.log(f2); // undefined  \nfunction f1() {}\nvar f2 = function() {}\n```\n\n只所以会有以上的打印结果，是由于js中的函数提升导致代码实际上是按照以下来执行的\n\n```javascript\nfunction f1() {} // 函数提升，整个代码块提升到文件的最开始\nconsole.log(f1);   \nconsole.log(f2);   \nvar f2 = function() {}\n```\n\n\n### 作用域的销毁\n\n#### window全局作用域\n\n页面关闭的时候在销毁\n\n#### 函数作用域\n\n转载并修改自[这里](http://www.cnblogs.com/qinmengjiao123-123/p/5219424.html)\n\n1. 作用域立即销毁\n\n一般情况下，函数执行形成一个私有的作用域，当执行完成后就销毁了，节省内存空间\n\n2. 作用域的不立即销毁\n\n举个例子\n\n```javascript\nfunction fn() {\n    var i = 10;\n    return function (n) {\n        console.log(n + i++);\n    }\n}\n```\n\n`fn()(15);`时，先执行fn,有一个私有的变量`i = 10`,返回一个堆内存地址 `xxxfff111`,我们发现这个地址还用到了一次,那么当前的这个`fn`形成私有作用域（A）就不能立即销毁了,`xxxfff111(15)`，输出`25`,A中的`i`变为`11`；当`xxxfff111`执行完了,发现这个地址没用了,浏览器就把`A`、`xxxfff111`都释放了\n\n`fn()(20);`时一样，在执行fn的时候一切都从新开始了,和上面的步骤是一样的，输出`30`\n\n3. 作用域不销毁\n\n形成一个私有作用域,里面的内容被外面占用了\n\n还是上面的例子\n\n`var f=fn();`时，`fn`执行形成一个私有的作用域A,A中有一个私有的变量`i = 10`,A中返回一个地址`xxxfff11`,被外面的`f`占用了,那么当前的A就不能销毁了\n\n`f(15);`时，输出`25`,让A中的`i = 11`\n`f(20);`时，输出`31`,让A中的`i = 12`\n\n当我们知道`f`用完的时候,为了优化性能,我们让`f=null`,这样的话A中的`xxxfff111`没人占用了,浏览器会把A和`xxxfff111`都释放了\n\n4. 几种不销毁常用到的形式\n\n* 函数执行\n\n返回一个引用数据类型的值,并且在函数的外面被别人接收了,那么当前函数形成的私有作用域就不在销毁了，例如上面的案例\n\n* 某种形式的闭包\n\n在函数执行的时候,里面的一个小函数的地址赋值给了我们的外面元素的点击事件,那么当前小函数也相当于被外面占用了,大函数执行形成的私有的作用域也不销毁了\n\n```javascript\nvar oLis = document.getElementsByTagName(\"li\");\nfor (var i = 0; i < oLis.length; i++) {\n    ~function (i) {\n        oLis[i].onclick = function () {\n            tabChange(i);\n        }\n    }(i);\n}\n```\n\n每一次循环都执行自执行函数形成一个私有的作用域(循环三次就有三个作用域,每一个作用域中都有一个i,第一个存储的是0,第二个存数的是1..)，在每一个私有的作用域中都把里面的函数绑定给了外面元素的点击事件,这样的话每一次形成的作用域都不销毁了(三个不销毁的作用域)\n\n* setTimeOut\n\n使用setTimeout实现轮询动画的时候,我们如果move需要传递参数值,那么像下面这样的写法会行成很多的不销毁的作用域,非常的耗性能\n\n```javascript\nfunction move(tar) {\n\t/*code*/\nwindow.setTimeout(function() {\n\tmove(tar);\n}, 10);\n}\n```\n\n这样写实现了,但是每一次执行定时器都会形成一个私有的所用域(匿名函数形成的)A,在A中使用了上级作用域中的tar的值,而且执行了move又形成了一个小的作用域(而在小的作用域中会使用tar的值),这样每一次定时器形成的A都不能销毁了\n\n解决办法\n\n```javascript\nfunction move(tar) {\n    ~function _move() {\n        /*code*/\n        window.setTimeout(_move, 10);\n    }();\n}\nmove(100);\n```\n\n#### 不同浏览器中内存空间释放方式\n\n1. 谷歌浏览器\n\n我们开辟一个内存，可能或有一些其他的变量等占用了这个内存，谷歌浏览器都会间隔一段时间看这个内存还有没有被占用，如果发现有没有被占用的内存了，就自己帮我们回收了(内存释放)\n\n2. 火狐和IE\n\n我们开个内存，当我们引用了它，就在内存中记录一个数,增加一个引用浏览器就把这个数+1，减少一个引用，浏览器就把这个数-1...当减到零的时候浏览器就把这个内存释放了;但是有些情况下(尤其是IE)记着记着就弄乱了，内存就不能释放了，浏览器的内存泄露\n\n所以说 `var obj={};` 对象不用的时候，手动 __`obj = null;`__ 是个好习惯，浏览器就会自动回收了\n\n\n### 原型对象与原型链\n\n部分转载自[这里](http://blog.csdn.net/kkkkkxiaofei/article/details/46474303)\n\n原型对象的用途就是为每个实例储存共享的方法和属性，他仅仅是个普通的对象。并且所有的实力共享一个原型对象，因此有别于实例方法与属性，原型对象只有一份。\n\n所以就会有如下等式成立\n\n```javascript\nfunction  a (aa) {\n\tthis.name = aa;\n}\n\na.prototype.getName = function(){\n\treturn this.name;\n};\n\nvar b = new a('aaa');\nconsole.log(b.getName === new a('bbb').getName)\n```\n\n#### 但可能也这么写\n\n```javascript\nfunction Person () {\n    this.name = 'John';\n}\nvar person = new Person();\nPerson.prototype = {\n    say: function() {\n        console.log('Hello,' + this.name);\n    }\n};\nperson.say();//person.say is not a function\n```\n\n很不幸，`person.say`方法没有找到，所以报错了。其实这样写的初衷是好的：因为如果想在原型对象上添加更多的属性和方法，我们不得不每次都要写一行`Person.prototype`,还不如提炼成一个`Object`来的直接。但是此例子巧就巧在构造实例对象操作是在添加原型方法之前，这样就会造成一个问题： \n\n当`var person = new Person()`时，`Person.prototype`为：`Person {}`(当然了，内部还有`constructor`属性),即`Person.prototype`指向一个空的对象{}。而对于实例`person`而言，其内部有一个原型链指针`__proto__`,该指针指向了`Person.prototype`指向的对象，即{}。接下来重置了`Person`的原型对象，使其指向了另外一个对象,即`Object {say: function}`,这时`person.proto`的指向还是没有变，它指向的`{}`对象里面是没有`say`方法的，因为此报错。\n\n从这个现象我们可以得出：\n\n在js中，对象在调用一个方法时会首先在自身里寻找是否有该方法，若没有，则去原型链上去寻找，依次层层递进，这里的原型链就是实例对象的proto属性。\n\n\n### HTTP请求过程及浏览器页面渲染过程\n\n转载并修改自[这里](http://www.cnblogs.com/dojo-lzz/p/3983335.html)\n\n#### 从域名解析到浏览器得到html代码\n\n域名解析 --> 发起TCP的3次握手 --> 建立TCP连接后发起http请求 --> 服务器响应http请求，浏览器得到html代码\n\n#### 从浏览器拿到html代码之后\n\n解析HTML --> 构建DOM树 --> DOM树与CSS样式进行附着构造呈现树 --> 布局 --> 绘制\n\n前两步浏览器是放在一起执行的，这里主要讨论两种DOM元素的解析，样式(style)与脚本文件(script)\n\n1. 外部样式会阻塞后续脚本执行，直到外部样式加载并解析完毕\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <title>JS Bin</title>\n  <script>var start = +new Date;</script>\n  <link href=\"http://udacity-crp.herokuapp.com/style.css?rtt=2\" rel=\"stylesheet\">\n  \n</head>\n  \n<body>\n  <span id=\"result\"></span>\n  <script>\n    var end = +new Date;\n    document.getElementById('result').innerHTML = (end-start);\n  </script>\n</body>\n</html>\n```\n\n![](http://images.cnitblog.com/blog/412020/201409/201357415969516.jpg)\n\n2. 外部样式不会阻塞后续外部脚本的加载，但会阻塞外部脚本的执行\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <title>JS Bin</title>\n  <script>var start = +new Date;</script>\n  <link href=\"http://udacity-crp.herokuapp.com/style.css?rtt=2\" rel=\"stylesheet\">\n  \n</head>\n  \n<body>\n  test\n  <script src=\"http://udacity-crp.herokuapp.com/time.js?rtt=1&a\"></script>\n  <div id=\"result\"></div>\n  <script>var end = +new Date;document.getElementById(\"result\").innerHTML = end-start;</script>\n  \n</body>\n</html>\n```\n\n外部脚本\n\n```javascript\nvar loadTime = document.createElement('div');\nloadTime.innerText = document.currentScript.src + ' executed @ ' + window.performance.now();\nloadTime.style.color = 'blue';\ndocument.body.appendChild(loadTime);\n```\n\n![](http://images.cnitblog.com/blog/412020/201409/201407227214213.jpg)\n\n3. 如果后续外部脚本含有async属性（IE下为defer），则外部样式不会阻塞该脚本的加载与执行\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <title>JS Bin</title>\n  <script>var start = +new Date;</script>\n  <link href=\"http://udacity-crp.herokuapp.com/style.css?rtt=2\" rel=\"stylesheet\">\n  \n</head>\n  \n<body>\n  test\n  <script src=\"http://udacity-crp.herokuapp.com/time.js?rtt=1&a\" async></script>\n  <div id=\"result\"></div>\n  <script>var end = +new Date;document.getElementById(\"result\").innerHTML = end-start;</script>\n  \n</body>\n</html>\n```\n\n从瀑布图中可以看到外部脚本的加载与执行并不受link的阻塞\n\n![](http://images.cnitblog.com/blog/412020/201409/201417036284209.jpg)\n\n4. 对于动态创建的link标签不会阻塞其后动态创建的script的加载与执行，不管script标签是否具有async属性，但对于其他非动态创建的script，以上三条结论仍适用\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <title>JS Bin</title>\n  <script>var start = +new Date;</script>\n  \n</head>\n  \n<body>\n  test\n  <script> \n    var link = document.createElement('link');\n    link.href = \"http://udacity-crp.herokuapp.com/style.css?rtt=2\";\n    link.rel = \"stylesheet\";\n    document.head.appendChild(link);\n    var script = document.createElement('script');\n    script.src = \"http://udacity-crp.herokuapp.com/time.js?rtt=1&a\";\n    document.head.appendChild(script);\n  </script>\n  <div id=\"result\"></div>\n  <script>var end = +new Date;document.getElementById(\"result\").innerHTML = end-start;</script>\n  \n</body>\n</html>\n```\n\n最终页面结构\n\n![](http://images.cnitblog.com/blog/412020/201409/201427440654419.jpg)\n\n\n\n#### 构建呈现树、CSS渲染优先级\n\nHTML解析完毕后，开始构建呈现树RenderTree，这一步的主要工作在于将css样式应用到DOM节点上\n\n一般情况下优先级如下：\n\n（外部样式）External style sheet <（内部样式）Internal style sheet <（内联样式）Inline style\n\n但如果外部样式放在内部样式的后面，则外部样式覆盖内部样式\n\n```html\n<head>\n    <style type=\"text/css\">\n        h3 { color: green; }\n    </style>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\"/>\n</head>\n<body>\n<h3>test</h3><!-- 被覆盖 -->\n</body>\n```\n\n##### 选择器权重\n\n内联样式(1000) > id选择器(100) > 类选择器(10) > 元素选择器(1)\n\n##### CSS优先级法则\n\n1. 选择器都有一个权值，权值越大越优先\n\n2. 当权值相等时，后出现的样式表设置要优于先出现的样式表设置\n\n3. 创作者的规则高于浏览者：即网页编写者设置的CSS 样式的优先权高于浏览器所设置的样式\n\n4. 继承的CSS 样式不如后来指定的CSS 样式\n\n5. 在同一组属性设置中标有“!important”规则的优先级最大\n\n#### 布局\n\n呈现树构造完成后浏览器便进行布局处理，及计算每个呈现树节点的大小和位置信息。有道友可能要问，前面已将样式附着到DOM节点上，不是已经有了样式信息为何还要计算大小。这里可以这样理解，以上包含大小的样式信息只是存在内存里，并没有实际使用，浏览器要根据窗口的实际大小来处理呈现树节点的实际显示大小和位置，比如对于margin为auto的处理。\n\n#### 绘制\n\n布局完成后，便是将呈现树绘制出来显示在屏幕上。对于每一个呈现树节点来说，主要绘制顺序如下\n\n背景颜色 --> 背景图片 --> 边框 --> 子呈现树节点 --> 轮廓\n\n\n### 行内元素和块级元素有哪些？区别？\n\n转载并修改自[这里](http://www.360doc.com/content/16/0315/20/28106033_542486725.shtml)\n\n#### 块级元素：block element\n\n每个块级元素默认占一行高度，一行内添加一个块级元素后无法一般无法添加其他元素（float浮动后除外）。两个块级元素连续编辑时，会在页面自动换行显示。块级元素一般可嵌套块级元素或行内元素；\n\n块级元素一般作为容器出现，用来组织结构，但并不全是如此。有些块级元素，如<form>只能包含块级元素。其他的块级元素则可以包含 行级元素如<P>.也有一些则既可以包含块级，也可以包含行级元素。\n\nDIV 是最常用的块级元素，元素样式的display:block都是块级元素。它们总是以一个块的形式表现出来，并且跟同级的兄弟块依次竖直排列，左右撑满。\n\n#### 行内元素：inline element\n\n也叫内联元素、内嵌元素等；行内元素一般都是基于语义级(semantic)的基本元素，只能容纳文本或其他内联元素，常见内联元素 “a”。比如 SPAN 元素，IFRAME元素和元素样式的display : inline的都是行内元素。例如文字这类元素，各个字母 之间横向排列，到最右端自动折行。\n\n#### block（块）元素的特点\n\n总是在新行上开始；\n\n高度，行高以及外边距和内边距都可控制；\n\n宽度缺省是它的容器的100%，除非设定一个宽度。\n\n它可以容纳内联元素和其他块元素 \n\n##### inline元素的特点\n\n和其他元素都在一行上；\n\n高，行高及外边距和内边距不可改变；\n\n宽度就是它的文字或图片的宽度，不可改变\n\n内联元素只能容纳文本或者其他内联元素\n\n设置宽度width 无效。\n\n设置高度height 无效，可以通过line-height来设置。\n\n设置margin 只有左右margin有效，上下无效。\n\n设置padding 只有左右padding有效，上下则无效。注意元素范围是增大了，但是对元素周围的内容是没影响的。\n \n\n##### 常见的块状元素\n\naddress – 地址\n\nblockquote – 块引用\n\ncenter – 举中对齐块\n\ndir – 目录列表\n\ndiv – 常用块级容易，也是CSS layout的主要标签\n\ndl – 定义列表\n\nfieldset – form控制组\n\nform – 交互表单\n\nh1 – 大标题\n\nh2 – 副标题\n\nh3 – 3级标题\n\nh4 – 4级标题\n\nh5 – 5级标题\n\nh6 – 6级标题\n\nhr – 水平分隔线\n\nisindex – input prompt\n\nmenu – 菜单列表\n\nnoframes – frames可选内容，（对于不支持frame的浏览器显示此区块内容\n\nnoscript – 可选脚本内容（对于不支持script的浏览器显示此内容）\n\nol – 有序表单\n\np – 段落\n\npre – 格式化文本\n\ntable – 表格\n\nul – 无序列表\n\n##### 常见的内联元素\n\na – 锚点\n\nabbr – 缩写\n\nacronym – 首字\n\nb – 粗体(不推荐)\n\nbdo – bidi override\n\nbig – 大字体\n\nbr – 换行\n\ncite – 引用\n\ncode – 计算机代码(在引用源码的时候需要)\n\ndfn – 定义字段\n\nem – 强调\n\nfont – 字体设定(不推荐)\n\ni – 斜体\n\nimg – 图片\n\ninput – 输入框\n\nkbd – 定义键盘文本\n\nlabel – 表格标签\n\nq – 短引用\n\ns – 中划线(不推荐)\n\nsamp – 定义范例计算机代码\n\nselect – 项目选择\n\nsmall – 小字体文本\n\nspan – 常用内联容器，定义文本内区块\n\nstrike – 中划线\n\nstrong – 粗体强调\n\nsub – 下标\n\nsup – 上标\n\ntextarea – 多行文本输入框\n\ntt – 电传文本\n\nu – 下划线\n\n##### 行内元素与块级元素有什么不同？\n\n区别一：\n\n块级：块级元素会独占一行，默认情况下宽度自动填满其父元素宽度\n\n行内：行内元素不会独占一行，相邻的行内元素会排在同一行。其宽度随内容的变化而变化。\n\n区别二：\n\n块级：块级元素可以设置宽高\n\n行内：行内元素不可以设置宽高\n\n区别三：\n\n块级：块级元素可以设置margin，padding\n\n行内：行内元素水平方向的margin-left; margin-right; padding-left; padding-right;可以生效。但是竖直方向的margin-bottom; margin-top; padding-top; padding-bottom;却不能生效。\n\n区别四：\n\n块级：display:block;\n\n行内：display:inline;\n\n可以通过修改display属性来切换块级元素和行内元素\n\ndisplay：inline-block可以让元素具有块级元素和行内元素的特性：既可以设置长宽，可以让padding和margin生效，又可以和其他行内元素并排。是一个很实用的属性\n\n### CSS3 Filter 与 transition\n\n手打太麻烦，详细请见MDN\n\n[filter](https://developer.mozilla.org/zh-CN/docs/Web/CSS/filter)\n\n[transform](https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform)\n\n======\n\n由于这篇文章是在晚上写的，打这几个字的时候保安已经催人离开自习室了，所以就先到这里，下次继续\n\n下次的内容\n\n__横向列表的实现方式__\n\n__BFC__\n\n__React生命周期__\n\n最后\n\n祝自己二面成功！\n\n",
        "labels": [
            "web",
            "first_try"
        ],
        "categories": [
            "coding"
        ]
    },
    {
        "title": "css3硬件加速也有坑！！！",
        "date": "2017-10-13 03:33:09",
        "section": "转载自[这里](http://div.io/topic/1348)\n\n常听人说\n\n> 移动端想要动画性能流畅，应该使用3d硬件加速\n\n最近深入了解了一些浏览器内核的细节，感觉这里面其实有坑啊。。。",
        "rest": "事情要从最近看的《WebKit技术内幕》说起，第二章介绍了网页的结构，其中提到了Webkit硬件加速的方式，会把需要渲染的元素放到特定的『Composited Layer』中，在chrome的控制台可以这样开启：\n\n![](http://divio.qiniudn.com/FmrRO3DtO1PlzCHQ4B4m4Zy2Sb6r)\n\n选择『Show composited layer borders』以后，就能看到有动画3d变换的元素会被一个黄色的边框圈起来，表示放到了一个新的『复合层（composited layer）』中渲染，大概长这个样子：\n\n![](http://divio.qiniudn.com/Fq9iXaEPLykGOdOhTfZV0eP406uE)\n\n蓝色的细线是浏览器渲染时候的『瓦片』，浏览器绘制页面的时候只会绘制可视区域一定范围内的瓦片，以节省性能开销，而黄色的边框框起来的，就代表了这个元素被放到特殊的复合层中渲染，跟主文档不在一个层中\n\n然后我觉得这个视图挺有意思的，就拿来看了一下国内某项目，不看不知道，一看被吓尿：\n\n![](http://divio.qiniudn.com/FpV09Q20V9TkglcB4gpSRXMcsvBI)\n\n这个项目什么时候搞成所有元素都用3d加速了？！\n\n仔细排查了这些被框出来的元素，完全没有任何需要复合层渲染的迹象，我真是哔了狗了。。。我开始一个个删除元素，简化代码，很快就发现，原来罪魁祸首在这里：\n\n![](http://divio.qiniudn.com/FgIUBriMYVxp6nKeT560hfXc14po)\n\n头部的那个轮播动画元素的存在居然会导致下面所有相对和绝对定位的元素都被放到复合层中。。。\n\n查了一些[资料](http://www.html5rocks.com/zh/tutorials/speed/layers/)：\n\n> 层创建标准\n\n> 什么情况下能使元素获得自己的层？虽然 Chrome 的启发式方法(heuristic)随着时间在不断发展进步，但是从目前来说，满足以下任意情况便会创建层：\n\n> * 3D 或透视变换(perspective transform) CSS 属性\n\n> * 使用加速视频解码的 元素\n\n> * 拥有 3D (WebGL) 上下文或加速的 2D 上下文的 元素\n\n> * 混合插件(如 Flash)\n\n> * 对自己的 opacity 做 CSS 动画或使用一个动画 webkit 变换的元素\n\n> * 拥有加速 CSS 过滤器的元素\n\n> * 元素有一个包含复合层的后代节点(换句话说，就是一个元素拥有一个子元素，该子元素在自己的层里)\n\n> * 元素有一个 z-index 较低且包含一个复合层的兄弟元素(换句话说就是该元素在复合层上面渲染)\n\n主要是最后一条，我觉得它的中文翻译不是很准确，原文其实是：\n\n> Element has a sibling with a lower z-index which has a compositing layer (in other words the it’s rendered on top of a composited layer)\n\n这句话的意思是，如果有一个元素，它的兄弟元素在复合层中渲染，而这个兄弟元素的z-index比较小，那么这个元素（不管是不是应用了硬件加速样式）也会被放到复合层中。\n\n最可怕的是，浏览器有可能给复合层之后的所有相对或绝对定位的元素都创建一个复合层来渲染，于是就有了上面那个项目截图的那种效果。之前一直奇怪为什么这个页面滚动很卡，明明没有多少DOM，现在看来问题就在这里了！\n\n于是乎我写了一个页面，让大家看看这东西到底有多大威力：\n\n![](http://ww3.sinaimg.cn/small/6767ed9agw1ew601lofomj2043041t8r.jpg)\n\n[http://fouber.github.io/test/layer/](http://fouber.github.io/test/layer/)\n\n我在上面这个页面中放置了一个h1标题，应用了translate3d动画，使得它被放到composited layer中渲染，然后在这个元素后面创建了2000个list，每个list中都有一个图片，一个标题和一个日期显示，其中图片和日期显示是绝对定位，父容器li是相对定位，然后，各位可以按照前述的说明打开chrome的『show composited layer borders』选项看看这个页面的内容复合层分布：\n\n![](http://ww1.sinaimg.cn/mw690/6767ed9agw1ew5zyewt1xj208f0gp76n.jpg)\n\n就是这个鸟样子，很难想象，这样的页面滚动起来会卡成什么样。我用的是mac机器，快速拖动滚动条chrome已经非常吃力了，然后我写了一个简单的滚动条移动操作：\n\n> setInterval('document.body.scrollTop++', 0);\n\n然后用timeline抓一下页面性能：\n\n![](http://ww4.sinaimg.cn/mw690/6767ed9agw1ew603kslv8j20f904fgm5.jpg)\n\n\n一次『Composite Layers』的计算居然要`96.206 ms`！！这还是在我的mac系统上哦，手机上真的会卡出翔。\n\n我在页面上放置了一个开关『为动画元素设置z-index』，这个checkbox点击之后，会用js给那个动画的h1元素加`position:relative`和`z-index: 1`，这种做法的原理是人为提升动画元素的z-index，让浏览器知道这个元素的层排序，就不会很傻逼的把其他z-index比它高的元素也弄到复合层中了，看看这个效果：\n\n![](http://ww3.sinaimg.cn/large/6767ed9agw1ew60cahy5qg20ld0gaqro.gif)\n\n仅仅给动画元素设置一个高一些的z-index，就能解决这种无厘头增加复合层的问题，略无语。。。搞定之后，再用滚动条移动函数抓一下页面性能：\n\n![](http://ww3.sinaimg.cn/large/6767ed9agw1ew603leoh4j20du046mxh.jpg)\n\n完全恢复正常了有木有！\n\n大家可以用支持『硬件加速』的『安卓』手机浏览器测试上述页面，给动画元素加z-index前后的性能差距非常明显。\n\n不过也不是所有浏览器都有这个问题，我在mac上的Safari、firefox都没有明显差异，安卓手机上的QQ浏览器好像也正常，猎豹、UC、欧朋、webview等浏览器差距明显，更多测试就靠大家来发现吧。\n\n最后总结一下：\n\n> __使用3D硬件加速提升动画性能时，最好给元素增加一个z-index属性，人为干扰复合层的排序，可以有效减少chrome创建不必要的复合层，提升渲染性能，移动端优化效果尤为明显。__\n\n大家可以现在就排查一下这类问题，尤其是用了轮播、动画loading的页面，出现这问题很常见。另外推荐在追查性能问题的时候打开『show composited layer borders』选项，如果页面有很多黄色的框肯定是不对的。\n\n最后，再次推荐一下《Webkit技术内幕》这本书。浏览器内核之于前端工程师，就如同操作系统之于后端工程师，毕竟是我们程序运行的宿主环境，多了解一些，很多问题容易想通。\n\n\n\n\n\n",
        "labels": [
            "web",
            "CSS"
        ],
        "categories": [
            "coding"
        ]
    }
]